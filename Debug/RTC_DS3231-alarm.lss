
RTC_DS3231-alarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000228  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000129e  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ee  00000000  00000000  00001612  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cff  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00002c00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00011b11  00000000  00000000  00002d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008b9  00000000  00000000  00014851  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0001510a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000008b9  00000000  00000000  00015172  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	c0 d0       	rcall	.+384    	; 0x21c <main>
  9c:	c3 c0       	rjmp	.+390    	; 0x224 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <configLCDPorts>:
    set_RW_LOW_write;					// Write to LCD module (RW low)
    set_RS_HIGH_Data;					// Select the Data Register (RS high)
    disable_E_Pin;						// Make sure E is initially low
    lcd_write_4(theChar);				// Write the upper 4-bits of the data
    lcd_write_4(theChar << 4);			// Write the lower 4-bits of the data
}
  a0:	8a b1       	in	r24, 0x0a	; 10
  a2:	80 6f       	ori	r24, 0xF0	; 240
  a4:	8a b9       	out	0x0a, r24	; 10
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8b 60       	ori	r24, 0x0B	; 11
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	20 9a       	sbi	0x04, 0	; 4
  ae:	08 95       	ret

000000b0 <lcd_write_4>:
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	00 d0       	rcall	.+0      	; 0xb6 <lcd_write_4+0x6>
  b6:	00 d0       	rcall	.+0      	; 0xb8 <lcd_write_4+0x8>
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	19 82       	std	Y+1, r1	; 0x01
  be:	1a 82       	std	Y+2, r1	; 0x02
  c0:	1b 82       	std	Y+3, r1	; 0x03
  c2:	1c 82       	std	Y+4, r1	; 0x04
  c4:	fe 01       	movw	r30, r28
  c6:	31 96       	adiw	r30, 0x01	; 1
  c8:	27 e0       	ldi	r18, 0x07	; 7
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	ac 01       	movw	r20, r24
  d2:	02 2e       	mov	r0, r18
  d4:	02 c0       	rjmp	.+4      	; 0xda <lcd_write_4+0x2a>
  d6:	55 95       	asr	r21
  d8:	47 95       	ror	r20
  da:	0a 94       	dec	r0
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <lcd_write_4+0x26>
  de:	40 fd       	sbrc	r20, 0
  e0:	60 83       	st	Z, r22
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	31 09       	sbc	r19, r1
  e6:	31 96       	adiw	r30, 0x01	; 1
  e8:	23 30       	cpi	r18, 0x03	; 3
  ea:	31 05       	cpc	r19, r1
  ec:	89 f7       	brne	.-30     	; 0xd0 <lcd_write_4+0x20>
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	8f 70       	andi	r24, 0x0F	; 15
  f2:	8b b9       	out	0x0b, r24	; 11
  f4:	2b b1       	in	r18, 0x0b	; 11
  f6:	49 81       	ldd	r20, Y+1	; 0x01
  f8:	30 e8       	ldi	r19, 0x80	; 128
  fa:	43 9f       	mul	r20, r19
  fc:	c0 01       	movw	r24, r0
  fe:	11 24       	eor	r1, r1
 100:	9a 81       	ldd	r25, Y+2	; 0x02
 102:	30 e4       	ldi	r19, 0x40	; 64
 104:	93 9f       	mul	r25, r19
 106:	a0 01       	movw	r20, r0
 108:	11 24       	eor	r1, r1
 10a:	48 2b       	or	r20, r24
 10c:	42 2b       	or	r20, r18
 10e:	9b 81       	ldd	r25, Y+3	; 0x03
 110:	80 e2       	ldi	r24, 0x20	; 32
 112:	98 9f       	mul	r25, r24
 114:	90 01       	movw	r18, r0
 116:	11 24       	eor	r1, r1
 118:	24 2b       	or	r18, r20
 11a:	9c 81       	ldd	r25, Y+4	; 0x04
 11c:	30 e1       	ldi	r19, 0x10	; 16
 11e:	93 9f       	mul	r25, r19
 120:	c0 01       	movw	r24, r0
 122:	11 24       	eor	r1, r1
 124:	82 2b       	or	r24, r18
 126:	8b b9       	out	0x0b, r24	; 11
 128:	5b 9a       	sbi	0x0b, 3	; 11
 12a:	85 e0       	ldi	r24, 0x05	; 5
 12c:	8a 95       	dec	r24
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_write_4+0x7c>
 130:	00 00       	nop
 132:	5b 98       	cbi	0x0b, 3	; 11
 134:	35 e0       	ldi	r19, 0x05	; 5
 136:	3a 95       	dec	r19
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_write_4+0x86>
 13a:	00 00       	nop
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <lcd_write_instruction_4f>:
Outputs:	none
Description:sends a byte to the LCD instruction register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_instruction_4f(uint8_t theInstruction)
{
 14a:	cf 93       	push	r28
 14c:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
 14e:	58 98       	cbi	0x0b, 0	; 11
    set_RS_LOW_Instr;					// Select the Data Register (RS high)
 150:	59 98       	cbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
 152:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);		// Write the upper 4-bits of the data
 154:	ad df       	rcall	.-166    	; 0xb0 <lcd_write_4>
    lcd_write_4(theInstruction << 4);	// Write the lower 4-bits of the data
 156:	8c 2f       	mov	r24, r28
 158:	82 95       	swap	r24
 15a:	80 7f       	andi	r24, 0xF0	; 240
 15c:	a9 df       	rcall	.-174    	; 0xb0 <lcd_write_4>
}
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <lcd_check_BF_4>:
void lcd_check_BF_4(void)
{
	
    uint8_t busy_flag_copy;             // busy flag 'mirror'

    set_D7_input;						// set D7 data direction to input
 162:	57 98       	cbi	0x0a, 7	; 10
    set_RS_LOW_Instr;					// select the Instruction Register (RS low)
 164:	59 98       	cbi	0x0b, 1	; 11
    set_RW_HIGH_read;					// read from LCD module (RW high)
 166:	58 9a       	sbi	0x0b, 0	; 11

    do
    {
        busy_flag_copy = 0;                         // initialize busy flag 'mirror'
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
 168:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	85 e0       	ldi	r24, 0x05	; 5
 16c:	8a 95       	dec	r24
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_check_BF_4+0xa>
 170:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)

        busy_flag_copy |= (lcd_D7_pin & (1<<lcd_D7_bit));  // get actual busy flag status
 172:	89 b1       	in	r24, 0x09	; 9

        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
 174:	5b 98       	cbi	0x0b, 3	; 11
 176:	95 e0       	ldi	r25, 0x05	; 5
 178:	9a 95       	dec	r25
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_check_BF_4+0x16>
 17c:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time' (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )
        
// read and discard alternate nibbles (D3 information)
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
 17e:	5b 9a       	sbi	0x0b, 3	; 11
 180:	95 e0       	ldi	r25, 0x05	; 5
 182:	9a 95       	dec	r25
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_check_BF_4+0x20>
 186:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)
        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
 188:	5b 98       	cbi	0x0b, 3	; 11
 18a:	95 e0       	ldi	r25, 0x05	; 5
 18c:	9a 95       	dec	r25
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_check_BF_4+0x2a>
 190:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )

    } while (busy_flag_copy);                       // check again if busy flag was high
 192:	88 23       	and	r24, r24
 194:	4c f3       	brlt	.-46     	; 0x168 <lcd_check_BF_4+0x6>

// arrive here if busy flag is clear -  clean up and return 
    set_RW_LOW_write;               // write to LCD module (RW low)
 196:	58 98       	cbi	0x0b, 0	; 11
    set_D7_output;                  // reset D7 data direction to output	
 198:	57 9a       	sbi	0x0a, 7	; 10
 19a:	08 95       	ret

0000019c <lcd_init_4f>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	2f ef       	ldi	r18, 0xFF	; 255
 19e:	81 ee       	ldi	r24, 0xE1	; 225
 1a0:	94 e0       	ldi	r25, 0x04	; 4
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <lcd_init_4f+0x6>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_init_4f+0x10>
 1ac:	00 00       	nop
	 this instruction can be sent on just the four available data lines and it will be interpreted
	 properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
	 control lines have previously been configured properly. */

	/* Set up the RS, E, and RW lines for the 'lcd_write_4' function. */
	set_RS_LOW_Instr;	// Select the Instruction Register (RS low)
 1ae:	59 98       	cbi	0x0b, 1	; 11
	disable_E_Pin;		// Make sure E is initially low
 1b0:	5b 98       	cbi	0x0b, 3	; 11
	set_RW_LOW_write;	// write to LCD module (RW low)
 1b2:	58 98       	cbi	0x0b, 0	; 11

	/* Reset the LCD controller */
	lcd_write_4(lcd_FunctionReset);		// First part of reset sequence
 1b4:	80 e3       	ldi	r24, 0x30	; 48
 1b6:	7c df       	rcall	.-264    	; 0xb0 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	25 e3       	ldi	r18, 0x35	; 53
 1ba:	2a 95       	dec	r18
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init_4f+0x1e>
 1be:	00 00       	nop
	_delay_us(10);                      // Delay of 10 us
	
	lcd_write_4(lcd_FunctionReset);		// Second part of reset sequence
 1c0:	80 e3       	ldi	r24, 0x30	; 48
 1c2:	76 df       	rcall	.-276    	; 0xb0 <lcd_write_4>
 1c4:	8f e1       	ldi	r24, 0x1F	; 31
 1c6:	93 e0       	ldi	r25, 0x03	; 3
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_init_4f+0x2c>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_init_4f+0x32>
	_delay_us(200);						// Delay of 200 us

	lcd_write_4(lcd_FunctionReset);		// Third part of reset sequence
 1ce:	00 00       	nop
 1d0:	80 e3       	ldi	r24, 0x30	; 48
 1d2:	6e df       	rcall	.-292    	; 0xb0 <lcd_write_4>
 1d4:	8f e3       	ldi	r24, 0x3F	; 63
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init_4f+0x3c>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_init_4f+0x42>
	/* Preliminary Function Set instruction - used only to set the 4-bit mode.
	 The number of lines or the font cannot be set at this time since the controller is still in the
	 8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
	 of the upper four bits of the instruction. */
	
	lcd_write_4(lcd_FunctionSet4bit);	// Set 4-bit mode
 1de:	00 00       	nop
 1e0:	88 e2       	ldi	r24, 0x28	; 40
	// From this point on the busy flag is available

	// Function Set instruction
	lcd_check_BF_4();    // Makes sure LCD controller is ready
 1e2:	66 df       	rcall	.-308    	; 0xb0 <lcd_write_4>
                         
	lcd_write_instruction_4f(lcd_FunctionSet4bit);  // Set mode, lines, and font
 1e4:	be df       	rcall	.-132    	; 0x162 <lcd_check_BF_4>
 1e6:	88 e2       	ldi	r24, 0x28	; 40
	/*The next three instructions are specified in the data sheet as part of the initialization routine,
	  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
	  later if the application requires a different configuration.*/

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
 1e8:	b0 df       	rcall	.-160    	; 0x14a <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOff);       // Turn display OFF
 1ea:	bb df       	rcall	.-138    	; 0x162 <lcd_check_BF_4>

	/* Clear Display instruction */
	lcd_check_BF_4();
 1ec:	88 e0       	ldi	r24, 0x08	; 8
	lcd_write_instruction_4f(lcd_Clear);            // Clear display RAM
 1ee:	ad df       	rcall	.-166    	; 0x14a <lcd_write_instruction_4f>
 1f0:	b8 df       	rcall	.-144    	; 0x162 <lcd_check_BF_4>
 1f2:	81 e0       	ldi	r24, 0x01	; 1
	
	/* Entry Mode Set instruction */
	lcd_check_BF_4();
 1f4:	aa df       	rcall	.-172    	; 0x14a <lcd_write_instruction_4f>
 1f6:	b5 df       	rcall	.-150    	; 0x162 <lcd_check_BF_4>
	lcd_write_instruction_4f(lcd_EntryMode);        // Set desired shift characteristics
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	a7 df       	rcall	.-178    	; 0x14a <lcd_write_instruction_4f>
 1fc:	b2 df       	rcall	.-156    	; 0x162 <lcd_check_BF_4>
	/*This is the end of the LCD controller initialization as specified in the data sheet, but the display
	  has been left in the OFF condition.  This is a good time to turn the display back ON. */

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
 1fe:	8c e0       	ldi	r24, 0x0C	; 12
 200:	a4 cf       	rjmp	.-184    	; 0x14a <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOn);        // turn the display ON
 202:	08 95       	ret

00000204 <initLCD>:
 204:	4d df       	rcall	.-358    	; 0xa0 <configLCDPorts>
 206:	ca df       	rcall	.-108    	; 0x19c <lcd_init_4f>
 208:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	81 ee       	ldi	r24, 0xE1	; 225
 20c:	94 e0       	ldi	r25, 0x04	; 4
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <initLCD+0xa>
 216:	00 c0       	rjmp	.+0      	; 0x218 <initLCD+0x14>
 218:	00 00       	nop
 21a:	08 95       	ret

0000021c <main>:

#define ALARM 0

int main (void)
{
	initLCD();
 21c:	f3 df       	rcall	.-26     	; 0x204 <initLCD>
	displayLCD_main(1, "A1M1: ", A1M1, "NONE");
	displayLCD_main(2, "A1M2: ", A1M2, "NONE");
	displayLCD_main(3, "A1M3: ", A1M3, "NONE");
	displayLCD_main(4, "A1M4: ", A1M4, "NONE");
#endif
}
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	08 95       	ret

00000224 <_exit>:
 224:	f8 94       	cli

00000226 <__stop_program>:
 226:	ff cf       	rjmp	.-2      	; 0x226 <__stop_program>
