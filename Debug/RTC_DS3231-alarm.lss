
RTC_DS3231-alarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000073e  00800100  000017e8  0000187c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080083e  0080083e  00001fba  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001fba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002018  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003efd  00000000  00000000  00002318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001096  00000000  00000000  00006215  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d42  00000000  00000000  000072ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c04  00000000  00000000  00009ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00012706  00000000  00000000  0000abf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000045da  00000000  00000000  0001d2fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  000218d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000012eb  00000000  00000000  00021b34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	4d c0       	rjmp	.+154    	; 0xa0 <__bad_interrupt>
       6:	00 00       	nop
       8:	4b c0       	rjmp	.+150    	; 0xa0 <__bad_interrupt>
       a:	00 00       	nop
       c:	49 c0       	rjmp	.+146    	; 0xa0 <__bad_interrupt>
       e:	00 00       	nop
      10:	47 c0       	rjmp	.+142    	; 0xa0 <__bad_interrupt>
      12:	00 00       	nop
      14:	45 c0       	rjmp	.+138    	; 0xa0 <__bad_interrupt>
      16:	00 00       	nop
      18:	43 c0       	rjmp	.+134    	; 0xa0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	41 c0       	rjmp	.+130    	; 0xa0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3f c0       	rjmp	.+126    	; 0xa0 <__bad_interrupt>
      22:	00 00       	nop
      24:	3d c0       	rjmp	.+122    	; 0xa0 <__bad_interrupt>
      26:	00 00       	nop
      28:	3b c0       	rjmp	.+118    	; 0xa0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	39 c0       	rjmp	.+114    	; 0xa0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	37 c0       	rjmp	.+110    	; 0xa0 <__bad_interrupt>
      32:	00 00       	nop
      34:	35 c0       	rjmp	.+106    	; 0xa0 <__bad_interrupt>
      36:	00 00       	nop
      38:	33 c0       	rjmp	.+102    	; 0xa0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	31 c0       	rjmp	.+98     	; 0xa0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	2f c0       	rjmp	.+94     	; 0xa0 <__bad_interrupt>
      42:	00 00       	nop
      44:	2d c0       	rjmp	.+90     	; 0xa0 <__bad_interrupt>
      46:	00 00       	nop
      48:	2b c0       	rjmp	.+86     	; 0xa0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	29 c0       	rjmp	.+82     	; 0xa0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	27 c0       	rjmp	.+78     	; 0xa0 <__bad_interrupt>
      52:	00 00       	nop
      54:	25 c0       	rjmp	.+74     	; 0xa0 <__bad_interrupt>
      56:	00 00       	nop
      58:	23 c0       	rjmp	.+70     	; 0xa0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	21 c0       	rjmp	.+66     	; 0xa0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1f c0       	rjmp	.+62     	; 0xa0 <__bad_interrupt>
      62:	00 00       	nop
      64:	1d c0       	rjmp	.+58     	; 0xa0 <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	18 e0       	ldi	r17, 0x08	; 8
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ee       	ldi	r30, 0xE8	; 232
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 33       	cpi	r26, 0x3E	; 62
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	28 e0       	ldi	r18, 0x08	; 8
      8c:	ae e3       	ldi	r26, 0x3E	; 62
      8e:	b8 e0       	ldi	r27, 0x08	; 8
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 34       	cpi	r26, 0x4D	; 77
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	46 d7       	rcall	.+3724   	; 0xf28 <main>
      9c:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <_exit>

000000a0 <__bad_interrupt>:
      a0:	af cf       	rjmp	.-162    	; 0x0 <__vectors>

000000a2 <a_ds3231_iic_write>:
        
        return 1;                                                                            /* return error */
    }
    
    return 0;                                                                                /* success return 0 */
}
      a2:	cf 93       	push	r28
      a4:	df 93       	push	r29
      a6:	1f 92       	push	r1
      a8:	cd b7       	in	r28, 0x3d	; 61
      aa:	de b7       	in	r29, 0x3e	; 62
      ac:	49 83       	std	Y+1, r20	; 0x01
      ae:	dc 01       	movw	r26, r24
      b0:	14 96       	adiw	r26, 0x04	; 4
      b2:	ed 91       	ld	r30, X+
      b4:	fc 91       	ld	r31, X
      b6:	15 97       	sbiw	r26, 0x05	; 5
      b8:	21 e0       	ldi	r18, 0x01	; 1
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	ae 01       	movw	r20, r28
      be:	4f 5f       	subi	r20, 0xFF	; 255
      c0:	5f 4f       	sbci	r21, 0xFF	; 255
      c2:	88 e6       	ldi	r24, 0x68	; 104
      c4:	09 95       	icall
      c6:	91 e0       	ldi	r25, 0x01	; 1
      c8:	81 11       	cpse	r24, r1
      ca:	01 c0       	rjmp	.+2      	; 0xce <a_ds3231_iic_write+0x2c>
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	89 2f       	mov	r24, r25
      d0:	0f 90       	pop	r0
      d2:	df 91       	pop	r29
      d4:	cf 91       	pop	r28
      d6:	08 95       	ret

000000d8 <a_ds3231_iic_multiple_read>:
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	dc 01       	movw	r26, r24
      dc:	16 96       	adiw	r26, 0x06	; 6
      de:	ed 91       	ld	r30, X+
      e0:	fc 91       	ld	r31, X
      e2:	17 97       	sbiw	r26, 0x07	; 7
      e4:	88 e6       	ldi	r24, 0x68	; 104
      e6:	09 95       	icall
      e8:	91 e0       	ldi	r25, 0x01	; 1
      ea:	81 11       	cpse	r24, r1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <a_ds3231_iic_multiple_read+0x18>
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	89 2f       	mov	r24, r25
      f2:	08 95       	ret

000000f4 <a_ds3231_bcd2hex>:
      f4:	38 2f       	mov	r19, r24
      f6:	3f 70       	andi	r19, 0x0F	; 15
      f8:	98 2f       	mov	r25, r24
      fa:	92 95       	swap	r25
      fc:	9f 70       	andi	r25, 0x0F	; 15
      fe:	99 0f       	add	r25, r25
     100:	29 2f       	mov	r18, r25
     102:	22 0f       	add	r18, r18
     104:	22 0f       	add	r18, r18
     106:	89 2f       	mov	r24, r25
     108:	82 0f       	add	r24, r18
     10a:	83 0f       	add	r24, r19
     10c:	08 95       	ret

0000010e <ds3231_get_time>:
     10e:	cf 92       	push	r12
     110:	df 92       	push	r13
     112:	ef 92       	push	r14
     114:	ff 92       	push	r15
     116:	1f 93       	push	r17
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	27 97       	sbiw	r28, 0x07	; 7
     122:	0f b6       	in	r0, 0x3f	; 63
     124:	f8 94       	cli
     126:	de bf       	out	0x3e, r29	; 62
     128:	0f be       	out	0x3f, r0	; 63
     12a:	cd bf       	out	0x3d, r28	; 61
     12c:	00 97       	sbiw	r24, 0x00	; 0
     12e:	09 f4       	brne	.+2      	; 0x132 <ds3231_get_time+0x24>
     130:	79 c0       	rjmp	.+242    	; 0x224 <ds3231_get_time+0x116>
     132:	dc 01       	movw	r26, r24
     134:	1e 96       	adiw	r26, 0x0e	; 14
     136:	1c 91       	ld	r17, X
     138:	1e 97       	sbiw	r26, 0x0e	; 14
     13a:	11 30       	cpi	r17, 0x01	; 1
     13c:	09 f0       	breq	.+2      	; 0x140 <ds3231_get_time+0x32>
     13e:	74 c0       	rjmp	.+232    	; 0x228 <ds3231_get_time+0x11a>
     140:	6b 01       	movw	r12, r22
     142:	7c 01       	movw	r14, r24
     144:	67 2b       	or	r22, r23
     146:	69 f4       	brne	.+26     	; 0x162 <ds3231_get_time+0x54>
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	9f 93       	push	r25
     14e:	8f 93       	push	r24
     150:	18 96       	adiw	r26, 0x08	; 8
     152:	ed 91       	ld	r30, X+
     154:	fc 91       	ld	r31, X
     156:	19 97       	sbiw	r26, 0x09	; 9
     158:	09 95       	icall
     15a:	0f 90       	pop	r0
     15c:	0f 90       	pop	r0
     15e:	12 e0       	ldi	r17, 0x02	; 2
     160:	64 c0       	rjmp	.+200    	; 0x22a <ds3231_get_time+0x11c>
     162:	ae 01       	movw	r20, r28
     164:	4f 5f       	subi	r20, 0xFF	; 255
     166:	5f 4f       	sbci	r21, 0xFF	; 255
     168:	87 e0       	ldi	r24, 0x07	; 7
     16a:	fa 01       	movw	r30, r20
     16c:	11 92       	st	Z+, r1
     16e:	8a 95       	dec	r24
     170:	e9 f7       	brne	.-6      	; 0x16c <ds3231_get_time+0x5e>
     172:	27 e0       	ldi	r18, 0x07	; 7
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	cd 01       	movw	r24, r26
     178:	af df       	rcall	.-162    	; 0xd8 <a_ds3231_iic_multiple_read>
     17a:	88 23       	and	r24, r24
     17c:	69 f0       	breq	.+26     	; 0x198 <ds3231_get_time+0x8a>
     17e:	85 e6       	ldi	r24, 0x65	; 101
     180:	93 e0       	ldi	r25, 0x03	; 3
     182:	9f 93       	push	r25
     184:	8f 93       	push	r24
     186:	d7 01       	movw	r26, r14
     188:	18 96       	adiw	r26, 0x08	; 8
     18a:	ed 91       	ld	r30, X+
     18c:	fc 91       	ld	r31, X
     18e:	19 97       	sbiw	r26, 0x09	; 9
     190:	09 95       	icall
     192:	0f 90       	pop	r0
     194:	0f 90       	pop	r0
     196:	49 c0       	rjmp	.+146    	; 0x22a <ds3231_get_time+0x11c>
     198:	8f 81       	ldd	r24, Y+7	; 0x07
     19a:	ac df       	rcall	.-168    	; 0xf4 <a_ds3231_bcd2hex>
     19c:	9e 81       	ldd	r25, Y+6	; 0x06
     19e:	49 2f       	mov	r20, r25
     1a0:	44 1f       	adc	r20, r20
     1a2:	44 27       	eor	r20, r20
     1a4:	44 1f       	adc	r20, r20
     1a6:	28 2f       	mov	r18, r24
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	2a 53       	subi	r18, 0x3A	; 58
     1ac:	38 4f       	sbci	r19, 0xF8	; 248
     1ae:	b4 e6       	ldi	r27, 0x64	; 100
     1b0:	4b 9f       	mul	r20, r27
     1b2:	20 0d       	add	r18, r0
     1b4:	31 1d       	adc	r19, r1
     1b6:	11 24       	eor	r1, r1
     1b8:	f6 01       	movw	r30, r12
     1ba:	31 83       	std	Z+1, r19	; 0x01
     1bc:	20 83       	st	Z, r18
     1be:	89 2f       	mov	r24, r25
     1c0:	8f 71       	andi	r24, 0x1F	; 31
     1c2:	98 df       	rcall	.-208    	; 0xf4 <a_ds3231_bcd2hex>
     1c4:	d6 01       	movw	r26, r12
     1c6:	12 96       	adiw	r26, 0x02	; 2
     1c8:	8c 93       	st	X, r24
     1ca:	8c 81       	ldd	r24, Y+4	; 0x04
     1cc:	93 df       	rcall	.-218    	; 0xf4 <a_ds3231_bcd2hex>
     1ce:	f6 01       	movw	r30, r12
     1d0:	83 83       	std	Z+3, r24	; 0x03
     1d2:	8d 81       	ldd	r24, Y+5	; 0x05
     1d4:	8f df       	rcall	.-226    	; 0xf4 <a_ds3231_bcd2hex>
     1d6:	d6 01       	movw	r26, r12
     1d8:	14 96       	adiw	r26, 0x04	; 4
     1da:	8c 93       	st	X, r24
     1dc:	14 97       	sbiw	r26, 0x04	; 4
     1de:	8b 81       	ldd	r24, Y+3	; 0x03
     1e0:	85 fb       	bst	r24, 5
     1e2:	99 27       	eor	r25, r25
     1e4:	90 f9       	bld	r25, 0
     1e6:	19 96       	adiw	r26, 0x09	; 9
     1e8:	9c 93       	st	X, r25
     1ea:	19 97       	sbiw	r26, 0x09	; 9
     1ec:	86 fb       	bst	r24, 6
     1ee:	99 27       	eor	r25, r25
     1f0:	90 f9       	bld	r25, 0
     1f2:	18 96       	adiw	r26, 0x08	; 8
     1f4:	9c 93       	st	X, r25
     1f6:	91 30       	cpi	r25, 0x01	; 1
     1f8:	29 f4       	brne	.+10     	; 0x204 <ds3231_get_time+0xf6>
     1fa:	8f 71       	andi	r24, 0x1F	; 31
     1fc:	7b df       	rcall	.-266    	; 0xf4 <a_ds3231_bcd2hex>
     1fe:	f6 01       	movw	r30, r12
     200:	85 83       	std	Z+5, r24	; 0x05
     202:	05 c0       	rjmp	.+10     	; 0x20e <ds3231_get_time+0x100>
     204:	8f 73       	andi	r24, 0x3F	; 63
     206:	76 df       	rcall	.-276    	; 0xf4 <a_ds3231_bcd2hex>
     208:	d6 01       	movw	r26, r12
     20a:	15 96       	adiw	r26, 0x05	; 5
     20c:	8c 93       	st	X, r24
     20e:	8a 81       	ldd	r24, Y+2	; 0x02
     210:	71 df       	rcall	.-286    	; 0xf4 <a_ds3231_bcd2hex>
     212:	f6 01       	movw	r30, r12
     214:	86 83       	std	Z+6, r24	; 0x06
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	6d df       	rcall	.-294    	; 0xf4 <a_ds3231_bcd2hex>
     21a:	d6 01       	movw	r26, r12
     21c:	17 96       	adiw	r26, 0x07	; 7
     21e:	8c 93       	st	X, r24
     220:	10 e0       	ldi	r17, 0x00	; 0
     222:	03 c0       	rjmp	.+6      	; 0x22a <ds3231_get_time+0x11c>
     224:	12 e0       	ldi	r17, 0x02	; 2
     226:	01 c0       	rjmp	.+2      	; 0x22a <ds3231_get_time+0x11c>
     228:	13 e0       	ldi	r17, 0x03	; 3
     22a:	81 2f       	mov	r24, r17
     22c:	27 96       	adiw	r28, 0x07	; 7
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	f8 94       	cli
     232:	de bf       	out	0x3e, r29	; 62
     234:	0f be       	out	0x3f, r0	; 63
     236:	cd bf       	out	0x3d, r28	; 61
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	1f 91       	pop	r17
     23e:	ff 90       	pop	r15
     240:	ef 90       	pop	r14
     242:	df 90       	pop	r13
     244:	cf 90       	pop	r12
     246:	08 95       	ret

00000248 <ds3231_set_oscillator>:
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	1f 92       	push	r1
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
     25a:	00 97       	sbiw	r24, 0x00	; 0
     25c:	b9 f1       	breq	.+110    	; 0x2cc <ds3231_set_oscillator+0x84>
     25e:	dc 01       	movw	r26, r24
     260:	1e 96       	adiw	r26, 0x0e	; 14
     262:	1c 91       	ld	r17, X
     264:	11 30       	cpi	r17, 0x01	; 1
     266:	a1 f5       	brne	.+104    	; 0x2d0 <ds3231_set_oscillator+0x88>
     268:	06 2f       	mov	r16, r22
     26a:	7c 01       	movw	r14, r24
     26c:	21 e0       	ldi	r18, 0x01	; 1
     26e:	ae 01       	movw	r20, r28
     270:	4f 5f       	subi	r20, 0xFF	; 255
     272:	5f 4f       	sbci	r21, 0xFF	; 255
     274:	6e e0       	ldi	r22, 0x0E	; 14
     276:	30 df       	rcall	.-416    	; 0xd8 <a_ds3231_iic_multiple_read>
     278:	88 23       	and	r24, r24
     27a:	69 f0       	breq	.+26     	; 0x296 <ds3231_set_oscillator+0x4e>
     27c:	8f e7       	ldi	r24, 0x7F	; 127
     27e:	94 e0       	ldi	r25, 0x04	; 4
     280:	9f 93       	push	r25
     282:	8f 93       	push	r24
     284:	d7 01       	movw	r26, r14
     286:	18 96       	adiw	r26, 0x08	; 8
     288:	ed 91       	ld	r30, X+
     28a:	fc 91       	ld	r31, X
     28c:	19 97       	sbiw	r26, 0x09	; 9
     28e:	09 95       	icall
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	20 c0       	rjmp	.+64     	; 0x2d6 <ds3231_set_oscillator+0x8e>
     296:	49 81       	ldd	r20, Y+1	; 0x01
     298:	4f 77       	andi	r20, 0x7F	; 127
     29a:	00 23       	and	r16, r16
     29c:	11 f0       	breq	.+4      	; 0x2a2 <ds3231_set_oscillator+0x5a>
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <ds3231_set_oscillator+0x5c>
     2a2:	80 e8       	ldi	r24, 0x80	; 128
     2a4:	48 2b       	or	r20, r24
     2a6:	49 83       	std	Y+1, r20	; 0x01
     2a8:	6e e0       	ldi	r22, 0x0E	; 14
     2aa:	c7 01       	movw	r24, r14
     2ac:	fa de       	rcall	.-524    	; 0xa2 <a_ds3231_iic_write>
     2ae:	88 23       	and	r24, r24
     2b0:	89 f0       	breq	.+34     	; 0x2d4 <ds3231_set_oscillator+0x8c>
     2b2:	8d e9       	ldi	r24, 0x9D	; 157
     2b4:	94 e0       	ldi	r25, 0x04	; 4
     2b6:	9f 93       	push	r25
     2b8:	8f 93       	push	r24
     2ba:	d7 01       	movw	r26, r14
     2bc:	18 96       	adiw	r26, 0x08	; 8
     2be:	ed 91       	ld	r30, X+
     2c0:	fc 91       	ld	r31, X
     2c2:	19 97       	sbiw	r26, 0x09	; 9
     2c4:	09 95       	icall
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <ds3231_set_oscillator+0x8e>
     2cc:	12 e0       	ldi	r17, 0x02	; 2
     2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <ds3231_set_oscillator+0x8e>
     2d0:	13 e0       	ldi	r17, 0x03	; 3
     2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <ds3231_set_oscillator+0x8e>
     2d4:	10 e0       	ldi	r17, 0x00	; 0
     2d6:	81 2f       	mov	r24, r17
     2d8:	0f 90       	pop	r0
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	1f 91       	pop	r17
     2e0:	0f 91       	pop	r16
     2e2:	ff 90       	pop	r15
     2e4:	ef 90       	pop	r14
     2e6:	08 95       	ret

000002e8 <ds3231_set_alarm_interrupt>:
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	1f 92       	push	r1
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
     2fc:	00 97       	sbiw	r24, 0x00	; 0
     2fe:	09 f4       	brne	.+2      	; 0x302 <ds3231_set_alarm_interrupt+0x1a>
     300:	44 c0       	rjmp	.+136    	; 0x38a <ds3231_set_alarm_interrupt+0xa2>
     302:	dc 01       	movw	r26, r24
     304:	1e 96       	adiw	r26, 0x0e	; 14
     306:	1c 91       	ld	r17, X
     308:	11 30       	cpi	r17, 0x01	; 1
     30a:	09 f0       	breq	.+2      	; 0x30e <ds3231_set_alarm_interrupt+0x26>
     30c:	40 c0       	rjmp	.+128    	; 0x38e <ds3231_set_alarm_interrupt+0xa6>
     30e:	04 2f       	mov	r16, r20
     310:	d6 2e       	mov	r13, r22
     312:	7c 01       	movw	r14, r24
     314:	21 e0       	ldi	r18, 0x01	; 1
     316:	ae 01       	movw	r20, r28
     318:	4f 5f       	subi	r20, 0xFF	; 255
     31a:	5f 4f       	sbci	r21, 0xFF	; 255
     31c:	6e e0       	ldi	r22, 0x0E	; 14
     31e:	dc de       	rcall	.-584    	; 0xd8 <a_ds3231_iic_multiple_read>
     320:	88 23       	and	r24, r24
     322:	69 f0       	breq	.+26     	; 0x33e <ds3231_set_alarm_interrupt+0x56>
     324:	8f e7       	ldi	r24, 0x7F	; 127
     326:	94 e0       	ldi	r25, 0x04	; 4
     328:	9f 93       	push	r25
     32a:	8f 93       	push	r24
     32c:	d7 01       	movw	r26, r14
     32e:	18 96       	adiw	r26, 0x08	; 8
     330:	ed 91       	ld	r30, X+
     332:	fc 91       	ld	r31, X
     334:	19 97       	sbiw	r26, 0x09	; 9
     336:	09 95       	icall
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	2b c0       	rjmp	.+86     	; 0x394 <ds3231_set_alarm_interrupt+0xac>
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0d 2c       	mov	r0, r13
     344:	02 c0       	rjmp	.+4      	; 0x34a <ds3231_set_alarm_interrupt+0x62>
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	0a 94       	dec	r0
     34c:	e2 f7       	brpl	.-8      	; 0x346 <ds3231_set_alarm_interrupt+0x5e>
     34e:	80 95       	com	r24
     350:	49 81       	ldd	r20, Y+1	; 0x01
     352:	48 23       	and	r20, r24
     354:	80 2f       	mov	r24, r16
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	02 c0       	rjmp	.+4      	; 0x35e <ds3231_set_alarm_interrupt+0x76>
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	da 94       	dec	r13
     360:	e2 f7       	brpl	.-8      	; 0x35a <ds3231_set_alarm_interrupt+0x72>
     362:	48 2b       	or	r20, r24
     364:	49 83       	std	Y+1, r20	; 0x01
     366:	6e e0       	ldi	r22, 0x0E	; 14
     368:	c7 01       	movw	r24, r14
     36a:	9b de       	rcall	.-714    	; 0xa2 <a_ds3231_iic_write>
     36c:	88 23       	and	r24, r24
     36e:	89 f0       	breq	.+34     	; 0x392 <ds3231_set_alarm_interrupt+0xaa>
     370:	8d e9       	ldi	r24, 0x9D	; 157
     372:	94 e0       	ldi	r25, 0x04	; 4
     374:	9f 93       	push	r25
     376:	8f 93       	push	r24
     378:	d7 01       	movw	r26, r14
     37a:	18 96       	adiw	r26, 0x08	; 8
     37c:	ed 91       	ld	r30, X+
     37e:	fc 91       	ld	r31, X
     380:	19 97       	sbiw	r26, 0x09	; 9
     382:	09 95       	icall
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	05 c0       	rjmp	.+10     	; 0x394 <ds3231_set_alarm_interrupt+0xac>
     38a:	12 e0       	ldi	r17, 0x02	; 2
     38c:	03 c0       	rjmp	.+6      	; 0x394 <ds3231_set_alarm_interrupt+0xac>
     38e:	13 e0       	ldi	r17, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <ds3231_set_alarm_interrupt+0xac>
     392:	10 e0       	ldi	r17, 0x00	; 0
     394:	81 2f       	mov	r24, r17
     396:	0f 90       	pop	r0
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	ff 90       	pop	r15
     3a2:	ef 90       	pop	r14
     3a4:	df 90       	pop	r13
     3a6:	08 95       	ret

000003a8 <ds3231_set_pin>:
     3a8:	ef 92       	push	r14
     3aa:	ff 92       	push	r15
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	1f 92       	push	r1
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	00 97       	sbiw	r24, 0x00	; 0
     3bc:	a9 f1       	breq	.+106    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     3be:	dc 01       	movw	r26, r24
     3c0:	1e 96       	adiw	r26, 0x0e	; 14
     3c2:	1c 91       	ld	r17, X
     3c4:	11 30       	cpi	r17, 0x01	; 1
     3c6:	91 f5       	brne	.+100    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     3c8:	06 2f       	mov	r16, r22
     3ca:	7c 01       	movw	r14, r24
     3cc:	21 e0       	ldi	r18, 0x01	; 1
     3ce:	ae 01       	movw	r20, r28
     3d0:	4f 5f       	subi	r20, 0xFF	; 255
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	6e e0       	ldi	r22, 0x0E	; 14
     3d6:	80 de       	rcall	.-768    	; 0xd8 <a_ds3231_iic_multiple_read>
     3d8:	88 23       	and	r24, r24
     3da:	69 f0       	breq	.+26     	; 0x3f6 <ds3231_set_pin+0x4e>
     3dc:	8f e7       	ldi	r24, 0x7F	; 127
     3de:	94 e0       	ldi	r25, 0x04	; 4
     3e0:	9f 93       	push	r25
     3e2:	8f 93       	push	r24
     3e4:	d7 01       	movw	r26, r14
     3e6:	18 96       	adiw	r26, 0x08	; 8
     3e8:	ed 91       	ld	r30, X+
     3ea:	fc 91       	ld	r31, X
     3ec:	19 97       	sbiw	r26, 0x09	; 9
     3ee:	09 95       	icall
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	1e c0       	rjmp	.+60     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     3f6:	49 81       	ldd	r20, Y+1	; 0x01
     3f8:	4b 7f       	andi	r20, 0xFB	; 251
     3fa:	60 2f       	mov	r22, r16
     3fc:	66 0f       	add	r22, r22
     3fe:	66 0f       	add	r22, r22
     400:	46 2b       	or	r20, r22
     402:	49 83       	std	Y+1, r20	; 0x01
     404:	6e e0       	ldi	r22, 0x0E	; 14
     406:	c7 01       	movw	r24, r14
     408:	4c de       	rcall	.-872    	; 0xa2 <a_ds3231_iic_write>
     40a:	88 23       	and	r24, r24
     40c:	89 f0       	breq	.+34     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     40e:	8d e9       	ldi	r24, 0x9D	; 157
     410:	94 e0       	ldi	r25, 0x04	; 4
     412:	9f 93       	push	r25
     414:	8f 93       	push	r24
     416:	d7 01       	movw	r26, r14
     418:	18 96       	adiw	r26, 0x08	; 8
     41a:	ed 91       	ld	r30, X+
     41c:	fc 91       	ld	r31, X
     41e:	19 97       	sbiw	r26, 0x09	; 9
     420:	09 95       	icall
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	05 c0       	rjmp	.+10     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     428:	12 e0       	ldi	r17, 0x02	; 2
     42a:	03 c0       	rjmp	.+6      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     42c:	13 e0       	ldi	r17, 0x03	; 3
     42e:	01 c0       	rjmp	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     430:	10 e0       	ldi	r17, 0x00	; 0
     432:	81 2f       	mov	r24, r17
     434:	0f 90       	pop	r0
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	08 95       	ret

00000444 <ds3231_set_square_wave>:
     444:	ef 92       	push	r14
     446:	ff 92       	push	r15
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	1f 92       	push	r1
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	00 97       	sbiw	r24, 0x00	; 0
     458:	b1 f1       	breq	.+108    	; 0x4c6 <ds3231_set_square_wave+0x82>
     45a:	dc 01       	movw	r26, r24
     45c:	1e 96       	adiw	r26, 0x0e	; 14
     45e:	1c 91       	ld	r17, X
     460:	11 30       	cpi	r17, 0x01	; 1
     462:	99 f5       	brne	.+102    	; 0x4ca <ds3231_set_square_wave+0x86>
     464:	06 2f       	mov	r16, r22
     466:	7c 01       	movw	r14, r24
     468:	21 e0       	ldi	r18, 0x01	; 1
     46a:	ae 01       	movw	r20, r28
     46c:	4f 5f       	subi	r20, 0xFF	; 255
     46e:	5f 4f       	sbci	r21, 0xFF	; 255
     470:	6e e0       	ldi	r22, 0x0E	; 14
     472:	32 de       	rcall	.-924    	; 0xd8 <a_ds3231_iic_multiple_read>
     474:	88 23       	and	r24, r24
     476:	69 f0       	breq	.+26     	; 0x492 <ds3231_set_square_wave+0x4e>
     478:	8f e7       	ldi	r24, 0x7F	; 127
     47a:	94 e0       	ldi	r25, 0x04	; 4
     47c:	9f 93       	push	r25
     47e:	8f 93       	push	r24
     480:	d7 01       	movw	r26, r14
     482:	18 96       	adiw	r26, 0x08	; 8
     484:	ed 91       	ld	r30, X+
     486:	fc 91       	ld	r31, X
     488:	19 97       	sbiw	r26, 0x09	; 9
     48a:	09 95       	icall
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	1f c0       	rjmp	.+62     	; 0x4d0 <ds3231_set_square_wave+0x8c>
     492:	49 81       	ldd	r20, Y+1	; 0x01
     494:	4f 7b       	andi	r20, 0xBF	; 191
     496:	b0 e4       	ldi	r27, 0x40	; 64
     498:	0b 9f       	mul	r16, r27
     49a:	c0 01       	movw	r24, r0
     49c:	11 24       	eor	r1, r1
     49e:	48 2b       	or	r20, r24
     4a0:	49 83       	std	Y+1, r20	; 0x01
     4a2:	6e e0       	ldi	r22, 0x0E	; 14
     4a4:	c7 01       	movw	r24, r14
     4a6:	fd dd       	rcall	.-1030   	; 0xa2 <a_ds3231_iic_write>
     4a8:	88 23       	and	r24, r24
     4aa:	89 f0       	breq	.+34     	; 0x4ce <ds3231_set_square_wave+0x8a>
     4ac:	8d e9       	ldi	r24, 0x9D	; 157
     4ae:	94 e0       	ldi	r25, 0x04	; 4
     4b0:	9f 93       	push	r25
     4b2:	8f 93       	push	r24
     4b4:	d7 01       	movw	r26, r14
     4b6:	18 96       	adiw	r26, 0x08	; 8
     4b8:	ed 91       	ld	r30, X+
     4ba:	fc 91       	ld	r31, X
     4bc:	19 97       	sbiw	r26, 0x09	; 9
     4be:	09 95       	icall
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <ds3231_set_square_wave+0x8c>
     4c6:	12 e0       	ldi	r17, 0x02	; 2
     4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <ds3231_set_square_wave+0x8c>
     4ca:	13 e0       	ldi	r17, 0x03	; 3
     4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <ds3231_set_square_wave+0x8c>
     4ce:	10 e0       	ldi	r17, 0x00	; 0
     4d0:	81 2f       	mov	r24, r17
     4d2:	0f 90       	pop	r0
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	08 95       	ret

000004e2 <ds3231_set_aging_offset>:
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	00 97       	sbiw	r24, 0x00	; 0
     4ea:	c1 f0       	breq	.+48     	; 0x51c <ds3231_set_aging_offset+0x3a>
     4ec:	dc 01       	movw	r26, r24
     4ee:	1e 96       	adiw	r26, 0x0e	; 14
     4f0:	cc 91       	ld	r28, X
     4f2:	c1 30       	cpi	r28, 0x01	; 1
     4f4:	a9 f4       	brne	.+42     	; 0x520 <ds3231_set_aging_offset+0x3e>
     4f6:	46 2f       	mov	r20, r22
     4f8:	8c 01       	movw	r16, r24
     4fa:	60 e1       	ldi	r22, 0x10	; 16
     4fc:	d2 dd       	rcall	.-1116   	; 0xa2 <a_ds3231_iic_write>
     4fe:	88 23       	and	r24, r24
     500:	89 f0       	breq	.+34     	; 0x524 <ds3231_set_aging_offset+0x42>
     502:	82 e1       	ldi	r24, 0x12	; 18
     504:	95 e0       	ldi	r25, 0x05	; 5
     506:	9f 93       	push	r25
     508:	8f 93       	push	r24
     50a:	d8 01       	movw	r26, r16
     50c:	18 96       	adiw	r26, 0x08	; 8
     50e:	ed 91       	ld	r30, X+
     510:	fc 91       	ld	r31, X
     512:	19 97       	sbiw	r26, 0x09	; 9
     514:	09 95       	icall
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	05 c0       	rjmp	.+10     	; 0x526 <ds3231_set_aging_offset+0x44>
     51c:	c2 e0       	ldi	r28, 0x02	; 2
     51e:	03 c0       	rjmp	.+6      	; 0x526 <ds3231_set_aging_offset+0x44>
     520:	c3 e0       	ldi	r28, 0x03	; 3
     522:	01 c0       	rjmp	.+2      	; 0x526 <ds3231_set_aging_offset+0x44>
     524:	c0 e0       	ldi	r28, 0x00	; 0
     526:	8c 2f       	mov	r24, r28
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	08 95       	ret

00000530 <ds3231_aging_offset_convert_to_register>:
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	00 97       	sbiw	r24, 0x00	; 0
     536:	81 f0       	breq	.+32     	; 0x558 <ds3231_aging_offset_convert_to_register+0x28>
     538:	fc 01       	movw	r30, r24
     53a:	86 85       	ldd	r24, Z+14	; 0x0e
     53c:	81 30       	cpi	r24, 0x01	; 1
     53e:	71 f4       	brne	.+28     	; 0x55c <ds3231_aging_offset_convert_to_register+0x2c>
     540:	e9 01       	movw	r28, r18
     542:	cb 01       	movw	r24, r22
     544:	ba 01       	movw	r22, r20
     546:	2f e8       	ldi	r18, 0x8F	; 143
     548:	32 ec       	ldi	r19, 0xC2	; 194
     54a:	45 ef       	ldi	r20, 0xF5	; 245
     54c:	5d e3       	ldi	r21, 0x3D	; 61
     54e:	3e d5       	rcall	.+2684   	; 0xfcc <__divsf3>
     550:	a5 d5       	rcall	.+2890   	; 0x109c <__fixsfsi>
     552:	68 83       	st	Y, r22
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	03 c0       	rjmp	.+6      	; 0x55e <ds3231_aging_offset_convert_to_register+0x2e>
     558:	82 e0       	ldi	r24, 0x02	; 2
     55a:	01 c0       	rjmp	.+2      	; 0x55e <ds3231_aging_offset_convert_to_register+0x2e>
     55c:	83 e0       	ldi	r24, 0x03	; 3
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	08 95       	ret

00000564 <ds3231_init>:
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	1f 92       	push	r1
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	00 97       	sbiw	r24, 0x00	; 0
     576:	09 f4       	brne	.+2      	; 0x57a <ds3231_init+0x16>
     578:	d1 c0       	rjmp	.+418    	; 0x71c <ds3231_init+0x1b8>
     57a:	dc 01       	movw	r26, r24
     57c:	18 96       	adiw	r26, 0x08	; 8
     57e:	2d 91       	ld	r18, X+
     580:	3c 91       	ld	r19, X
     582:	19 97       	sbiw	r26, 0x09	; 9
     584:	21 15       	cp	r18, r1
     586:	31 05       	cpc	r19, r1
     588:	09 f4       	brne	.+2      	; 0x58c <ds3231_init+0x28>
     58a:	cc c0       	rjmp	.+408    	; 0x724 <ds3231_init+0x1c0>
     58c:	8c 01       	movw	r16, r24
     58e:	ed 91       	ld	r30, X+
     590:	fc 91       	ld	r31, X
     592:	30 97       	sbiw	r30, 0x00	; 0
     594:	69 f4       	brne	.+26     	; 0x5b0 <ds3231_init+0x4c>
     596:	8d e4       	ldi	r24, 0x4D	; 77
     598:	95 e0       	ldi	r25, 0x05	; 5
     59a:	9f 93       	push	r25
     59c:	8f 93       	push	r24
     59e:	f9 01       	movw	r30, r18
     5a0:	09 95       	icall
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 2e       	mov	r0, r31
     5a8:	f3 e0       	ldi	r31, 0x03	; 3
     5aa:	ff 2e       	mov	r15, r31
     5ac:	f0 2d       	mov	r31, r0
     5ae:	be c0       	rjmp	.+380    	; 0x72c <ds3231_init+0x1c8>
     5b0:	dc 01       	movw	r26, r24
     5b2:	12 96       	adiw	r26, 0x02	; 2
     5b4:	8d 91       	ld	r24, X+
     5b6:	9c 91       	ld	r25, X
     5b8:	13 97       	sbiw	r26, 0x03	; 3
     5ba:	89 2b       	or	r24, r25
     5bc:	69 f4       	brne	.+26     	; 0x5d8 <ds3231_init+0x74>
     5be:	88 e6       	ldi	r24, 0x68	; 104
     5c0:	95 e0       	ldi	r25, 0x05	; 5
     5c2:	9f 93       	push	r25
     5c4:	8f 93       	push	r24
     5c6:	f9 01       	movw	r30, r18
     5c8:	09 95       	icall
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 2e       	mov	r0, r31
     5d0:	f3 e0       	ldi	r31, 0x03	; 3
     5d2:	ff 2e       	mov	r15, r31
     5d4:	f0 2d       	mov	r31, r0
     5d6:	aa c0       	rjmp	.+340    	; 0x72c <ds3231_init+0x1c8>
     5d8:	d8 01       	movw	r26, r16
     5da:	14 96       	adiw	r26, 0x04	; 4
     5dc:	8d 91       	ld	r24, X+
     5de:	9c 91       	ld	r25, X
     5e0:	15 97       	sbiw	r26, 0x05	; 5
     5e2:	89 2b       	or	r24, r25
     5e4:	69 f4       	brne	.+26     	; 0x600 <ds3231_init+0x9c>
     5e6:	85 e8       	ldi	r24, 0x85	; 133
     5e8:	95 e0       	ldi	r25, 0x05	; 5
     5ea:	9f 93       	push	r25
     5ec:	8f 93       	push	r24
     5ee:	f9 01       	movw	r30, r18
     5f0:	09 95       	icall
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 2e       	mov	r0, r31
     5f8:	f3 e0       	ldi	r31, 0x03	; 3
     5fa:	ff 2e       	mov	r15, r31
     5fc:	f0 2d       	mov	r31, r0
     5fe:	96 c0       	rjmp	.+300    	; 0x72c <ds3231_init+0x1c8>
     600:	d8 01       	movw	r26, r16
     602:	16 96       	adiw	r26, 0x06	; 6
     604:	8d 91       	ld	r24, X+
     606:	9c 91       	ld	r25, X
     608:	17 97       	sbiw	r26, 0x07	; 7
     60a:	89 2b       	or	r24, r25
     60c:	69 f4       	brne	.+26     	; 0x628 <ds3231_init+0xc4>
     60e:	81 ea       	ldi	r24, 0xA1	; 161
     610:	95 e0       	ldi	r25, 0x05	; 5
     612:	9f 93       	push	r25
     614:	8f 93       	push	r24
     616:	f9 01       	movw	r30, r18
     618:	09 95       	icall
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	0f 2e       	mov	r0, r31
     620:	f3 e0       	ldi	r31, 0x03	; 3
     622:	ff 2e       	mov	r15, r31
     624:	f0 2d       	mov	r31, r0
     626:	82 c0       	rjmp	.+260    	; 0x72c <ds3231_init+0x1c8>
     628:	d8 01       	movw	r26, r16
     62a:	1c 96       	adiw	r26, 0x0c	; 12
     62c:	8d 91       	ld	r24, X+
     62e:	9c 91       	ld	r25, X
     630:	1d 97       	sbiw	r26, 0x0d	; 13
     632:	89 2b       	or	r24, r25
     634:	69 f4       	brne	.+26     	; 0x650 <ds3231_init+0xec>
     636:	8c eb       	ldi	r24, 0xBC	; 188
     638:	95 e0       	ldi	r25, 0x05	; 5
     63a:	9f 93       	push	r25
     63c:	8f 93       	push	r24
     63e:	f9 01       	movw	r30, r18
     640:	09 95       	icall
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0f 2e       	mov	r0, r31
     648:	f3 e0       	ldi	r31, 0x03	; 3
     64a:	ff 2e       	mov	r15, r31
     64c:	f0 2d       	mov	r31, r0
     64e:	6e c0       	rjmp	.+220    	; 0x72c <ds3231_init+0x1c8>
     650:	d8 01       	movw	r26, r16
     652:	1a 96       	adiw	r26, 0x0a	; 10
     654:	8d 91       	ld	r24, X+
     656:	9c 91       	ld	r25, X
     658:	1b 97       	sbiw	r26, 0x0b	; 11
     65a:	89 2b       	or	r24, r25
     65c:	69 f4       	brne	.+26     	; 0x678 <ds3231_init+0x114>
     65e:	87 ed       	ldi	r24, 0xD7	; 215
     660:	95 e0       	ldi	r25, 0x05	; 5
     662:	9f 93       	push	r25
     664:	8f 93       	push	r24
     666:	f9 01       	movw	r30, r18
     668:	09 95       	icall
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 2e       	mov	r0, r31
     670:	f3 e0       	ldi	r31, 0x03	; 3
     672:	ff 2e       	mov	r15, r31
     674:	f0 2d       	mov	r31, r0
     676:	5a c0       	rjmp	.+180    	; 0x72c <ds3231_init+0x1c8>
     678:	09 95       	icall
     67a:	f8 2e       	mov	r15, r24
     67c:	88 23       	and	r24, r24
     67e:	79 f0       	breq	.+30     	; 0x69e <ds3231_init+0x13a>
     680:	8a ef       	ldi	r24, 0xFA	; 250
     682:	95 e0       	ldi	r25, 0x05	; 5
     684:	9f 93       	push	r25
     686:	8f 93       	push	r24
     688:	d8 01       	movw	r26, r16
     68a:	18 96       	adiw	r26, 0x08	; 8
     68c:	ed 91       	ld	r30, X+
     68e:	fc 91       	ld	r31, X
     690:	19 97       	sbiw	r26, 0x09	; 9
     692:	09 95       	icall
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	ff 24       	eor	r15, r15
     69a:	f3 94       	inc	r15
     69c:	47 c0       	rjmp	.+142    	; 0x72c <ds3231_init+0x1c8>
     69e:	21 e0       	ldi	r18, 0x01	; 1
     6a0:	ae 01       	movw	r20, r28
     6a2:	4f 5f       	subi	r20, 0xFF	; 255
     6a4:	5f 4f       	sbci	r21, 0xFF	; 255
     6a6:	6f e0       	ldi	r22, 0x0F	; 15
     6a8:	c8 01       	movw	r24, r16
     6aa:	16 dd       	rcall	.-1492   	; 0xd8 <a_ds3231_iic_multiple_read>
     6ac:	88 23       	and	r24, r24
     6ae:	a9 f0       	breq	.+42     	; 0x6da <ds3231_init+0x176>
     6b0:	8c eb       	ldi	r24, 0xBC	; 188
     6b2:	94 e0       	ldi	r25, 0x04	; 4
     6b4:	9f 93       	push	r25
     6b6:	8f 93       	push	r24
     6b8:	d8 01       	movw	r26, r16
     6ba:	18 96       	adiw	r26, 0x08	; 8
     6bc:	ed 91       	ld	r30, X+
     6be:	fc 91       	ld	r31, X
     6c0:	19 97       	sbiw	r26, 0x09	; 9
     6c2:	09 95       	icall
     6c4:	d8 01       	movw	r26, r16
     6c6:	12 96       	adiw	r26, 0x02	; 2
     6c8:	ed 91       	ld	r30, X+
     6ca:	fc 91       	ld	r31, X
     6cc:	13 97       	sbiw	r26, 0x03	; 3
     6ce:	09 95       	icall
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	ff 24       	eor	r15, r15
     6d6:	f3 94       	inc	r15
     6d8:	29 c0       	rjmp	.+82     	; 0x72c <ds3231_init+0x1c8>
     6da:	49 81       	ldd	r20, Y+1	; 0x01
     6dc:	4f 77       	andi	r20, 0x7F	; 127
     6de:	49 83       	std	Y+1, r20	; 0x01
     6e0:	6f e0       	ldi	r22, 0x0F	; 15
     6e2:	c8 01       	movw	r24, r16
     6e4:	de dc       	rcall	.-1604   	; 0xa2 <a_ds3231_iic_write>
     6e6:	88 23       	and	r24, r24
     6e8:	a9 f0       	breq	.+42     	; 0x714 <ds3231_init+0x1b0>
     6ea:	84 e1       	ldi	r24, 0x14	; 20
     6ec:	96 e0       	ldi	r25, 0x06	; 6
     6ee:	9f 93       	push	r25
     6f0:	8f 93       	push	r24
     6f2:	d8 01       	movw	r26, r16
     6f4:	18 96       	adiw	r26, 0x08	; 8
     6f6:	ed 91       	ld	r30, X+
     6f8:	fc 91       	ld	r31, X
     6fa:	19 97       	sbiw	r26, 0x09	; 9
     6fc:	09 95       	icall
     6fe:	d8 01       	movw	r26, r16
     700:	12 96       	adiw	r26, 0x02	; 2
     702:	ed 91       	ld	r30, X+
     704:	fc 91       	ld	r31, X
     706:	13 97       	sbiw	r26, 0x03	; 3
     708:	09 95       	icall
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	ff 24       	eor	r15, r15
     710:	f3 94       	inc	r15
     712:	0c c0       	rjmp	.+24     	; 0x72c <ds3231_init+0x1c8>
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	f8 01       	movw	r30, r16
     718:	86 87       	std	Z+14, r24	; 0x0e
     71a:	08 c0       	rjmp	.+16     	; 0x72c <ds3231_init+0x1c8>
     71c:	68 94       	set
     71e:	ff 24       	eor	r15, r15
     720:	f1 f8       	bld	r15, 1
     722:	04 c0       	rjmp	.+8      	; 0x72c <ds3231_init+0x1c8>
     724:	0f 2e       	mov	r0, r31
     726:	f3 e0       	ldi	r31, 0x03	; 3
     728:	ff 2e       	mov	r15, r31
     72a:	f0 2d       	mov	r31, r0
     72c:	8f 2d       	mov	r24, r15
     72e:	0f 90       	pop	r0
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	ff 90       	pop	r15
     73a:	08 95       	ret

0000073c <ds3231_deinit>:
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	c1 f0       	breq	.+48     	; 0x776 <ds3231_deinit+0x3a>
     746:	fc 01       	movw	r30, r24
     748:	16 85       	ldd	r17, Z+14	; 0x0e
     74a:	11 30       	cpi	r17, 0x01	; 1
     74c:	b1 f4       	brne	.+44     	; 0x77a <ds3231_deinit+0x3e>
     74e:	ec 01       	movw	r28, r24
     750:	02 80       	ldd	r0, Z+2	; 0x02
     752:	f3 81       	ldd	r31, Z+3	; 0x03
     754:	e0 2d       	mov	r30, r0
     756:	09 95       	icall
     758:	88 23       	and	r24, r24
     75a:	59 f0       	breq	.+22     	; 0x772 <ds3231_deinit+0x36>
     75c:	82 e3       	ldi	r24, 0x32	; 50
     75e:	96 e0       	ldi	r25, 0x06	; 6
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	e8 85       	ldd	r30, Y+8	; 0x08
     766:	f9 85       	ldd	r31, Y+9	; 0x09
     768:	09 95       	icall
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	81 2f       	mov	r24, r17
     770:	05 c0       	rjmp	.+10     	; 0x77c <ds3231_deinit+0x40>
     772:	1e 86       	std	Y+14, r1	; 0x0e
     774:	03 c0       	rjmp	.+6      	; 0x77c <ds3231_deinit+0x40>
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	01 c0       	rjmp	.+2      	; 0x77c <ds3231_deinit+0x40>
     77a:	83 e0       	ldi	r24, 0x03	; 3
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <ds3231_set_32khz_output>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t ds3231_set_32khz_output(ds3231_handle_t *handle, ds3231_bool_t enable)
{
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	1f 92       	push	r1
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                      /* check handle */
     796:	00 97       	sbiw	r24, 0x00	; 0
     798:	b1 f1       	breq	.+108    	; 0x806 <ds3231_set_32khz_output+0x82>
    {
        return 2;                                                                            /* return error */
    }
    if (handle->inited != 1)                                                                 /* check handle initialization */
     79a:	dc 01       	movw	r26, r24
     79c:	1e 96       	adiw	r26, 0x0e	; 14
     79e:	1c 91       	ld	r17, X
     7a0:	11 30       	cpi	r17, 0x01	; 1
     7a2:	99 f5       	brne	.+102    	; 0x80a <ds3231_set_32khz_output+0x86>
     7a4:	06 2f       	mov	r16, r22
     7a6:	7c 01       	movw	r14, r24
    {
        return 3;                                                                            /* return error */
    }
    
    res = a_ds3231_iic_multiple_read(handle, DS3231_REG_STATUS, (uint8_t *)&prev, 1);        /* multiple read */
     7a8:	21 e0       	ldi	r18, 0x01	; 1
     7aa:	ae 01       	movw	r20, r28
     7ac:	4f 5f       	subi	r20, 0xFF	; 255
     7ae:	5f 4f       	sbci	r21, 0xFF	; 255
     7b0:	6f e0       	ldi	r22, 0x0F	; 15
     7b2:	92 dc       	rcall	.-1756   	; 0xd8 <a_ds3231_iic_multiple_read>
    if (res != 0)                                                                            /* check result */
     7b4:	88 23       	and	r24, r24
     7b6:	69 f0       	breq	.+26     	; 0x7d2 <ds3231_set_32khz_output+0x4e>
    {
        handle->debug_print("ds3231: read status failed.\n");                                /* read status failed */
     7b8:	8c eb       	ldi	r24, 0xBC	; 188
     7ba:	94 e0       	ldi	r25, 0x04	; 4
     7bc:	9f 93       	push	r25
     7be:	8f 93       	push	r24
     7c0:	d7 01       	movw	r26, r14
     7c2:	18 96       	adiw	r26, 0x08	; 8
     7c4:	ed 91       	ld	r30, X+
     7c6:	fc 91       	ld	r31, X
     7c8:	19 97       	sbiw	r26, 0x09	; 9
     7ca:	09 95       	icall
        
        return 1;                                                                            /* return error */
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	1f c0       	rjmp	.+62     	; 0x810 <ds3231_set_32khz_output+0x8c>
    }
    prev &= ~(1 << 3);                                                                       /* clear config */
    prev |= enable << 3;                                                                     /* set enable */
     7d2:	49 81       	ldd	r20, Y+1	; 0x01
     7d4:	47 7f       	andi	r20, 0xF7	; 247
     7d6:	60 2f       	mov	r22, r16
     7d8:	66 0f       	add	r22, r22
     7da:	66 0f       	add	r22, r22
     7dc:	66 0f       	add	r22, r22
     7de:	46 2b       	or	r20, r22
     7e0:	49 83       	std	Y+1, r20	; 0x01
    res = a_ds3231_iic_write(handle, DS3231_REG_STATUS, prev);                               /* write status */
     7e2:	6f e0       	ldi	r22, 0x0F	; 15
     7e4:	c7 01       	movw	r24, r14
     7e6:	5d dc       	rcall	.-1862   	; 0xa2 <a_ds3231_iic_write>
    if (res != 0)                                                                            /* check result */
     7e8:	88 23       	and	r24, r24
     7ea:	89 f0       	breq	.+34     	; 0x80e <ds3231_set_32khz_output+0x8a>
    {
        handle->debug_print("ds3231: write status failed.\n");                               /* write status failed */
     7ec:	84 e1       	ldi	r24, 0x14	; 20
     7ee:	96 e0       	ldi	r25, 0x06	; 6
     7f0:	9f 93       	push	r25
     7f2:	8f 93       	push	r24
     7f4:	d7 01       	movw	r26, r14
     7f6:	18 96       	adiw	r26, 0x08	; 8
     7f8:	ed 91       	ld	r30, X+
     7fa:	fc 91       	ld	r31, X
     7fc:	19 97       	sbiw	r26, 0x09	; 9
     7fe:	09 95       	icall
        
        return 1;                                                                            /* return error */
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	05 c0       	rjmp	.+10     	; 0x810 <ds3231_set_32khz_output+0x8c>
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                      /* check handle */
    {
        return 2;                                                                            /* return error */
     806:	12 e0       	ldi	r17, 0x02	; 2
     808:	03 c0       	rjmp	.+6      	; 0x810 <ds3231_set_32khz_output+0x8c>
    }
    if (handle->inited != 1)                                                                 /* check handle initialization */
    {
        return 3;                                                                            /* return error */
     80a:	13 e0       	ldi	r17, 0x03	; 3
     80c:	01 c0       	rjmp	.+2      	; 0x810 <ds3231_set_32khz_output+0x8c>
        handle->debug_print("ds3231: write status failed.\n");                               /* write status failed */
        
        return 1;                                                                            /* return error */
    }
    
    return 0;                                                                                /* success return 0 */
     80e:	10 e0       	ldi	r17, 0x00	; 0
}
     810:	81 2f       	mov	r24, r17
     812:	0f 90       	pop	r0
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	08 95       	ret

00000822 <ds3231_basic_init>:
uint8_t ds3231_basic_set_timestamp_time_zone(int8_t zone)
{
    gs_time_zone = zone;
    
    return 0;
}
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	1f 92       	push	r1
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	ee e3       	ldi	r30, 0x3E	; 62
     82e:	f8 e0       	ldi	r31, 0x08	; 8
     830:	8f e0       	ldi	r24, 0x0F	; 15
     832:	df 01       	movw	r26, r30
     834:	1d 92       	st	X+, r1
     836:	8a 95       	dec	r24
     838:	e9 f7       	brne	.-6      	; 0x834 <ds3231_basic_init+0x12>
     83a:	8c ee       	ldi	r24, 0xEC	; 236
     83c:	94 e0       	ldi	r25, 0x04	; 4
     83e:	91 83       	std	Z+1, r25	; 0x01
     840:	80 83       	st	Z, r24
     842:	83 ef       	ldi	r24, 0xF3	; 243
     844:	94 e0       	ldi	r25, 0x04	; 4
     846:	93 83       	std	Z+3, r25	; 0x03
     848:	82 83       	std	Z+2, r24	; 0x02
     84a:	85 ef       	ldi	r24, 0xF5	; 245
     84c:	94 e0       	ldi	r25, 0x04	; 4
     84e:	97 83       	std	Z+7, r25	; 0x07
     850:	86 83       	std	Z+6, r24	; 0x06
     852:	8a e2       	ldi	r24, 0x2A	; 42
     854:	95 e0       	ldi	r25, 0x05	; 5
     856:	95 83       	std	Z+5, r25	; 0x05
     858:	84 83       	std	Z+4, r24	; 0x04
     85a:	8a e3       	ldi	r24, 0x3A	; 58
     85c:	95 e0       	ldi	r25, 0x05	; 5
     85e:	95 87       	std	Z+13, r25	; 0x0d
     860:	84 87       	std	Z+12, r24	; 0x0c
     862:	8b e3       	ldi	r24, 0x3B	; 59
     864:	95 e0       	ldi	r25, 0x05	; 5
     866:	91 87       	std	Z+9, r25	; 0x09
     868:	80 87       	std	Z+8, r24	; 0x08
     86a:	82 e4       	ldi	r24, 0x42	; 66
     86c:	95 e0       	ldi	r25, 0x05	; 5
     86e:	93 87       	std	Z+11, r25	; 0x0b
     870:	82 87       	std	Z+10, r24	; 0x0a
     872:	cf 01       	movw	r24, r30
     874:	77 de       	rcall	.-786    	; 0x564 <ds3231_init>
     876:	88 23       	and	r24, r24
     878:	49 f0       	breq	.+18     	; 0x88c <ds3231_basic_init+0x6a>
     87a:	8b e7       	ldi	r24, 0x7B	; 123
     87c:	96 e0       	ldi	r25, 0x06	; 6
     87e:	9f 93       	push	r25
     880:	8f 93       	push	r24
     882:	f9 d0       	rcall	.+498    	; 0xa76 <ds3231_interface_debug_print>
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	98 c0       	rjmp	.+304    	; 0x9bc <__stack+0xbd>
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	8e e3       	ldi	r24, 0x3E	; 62
     890:	98 e0       	ldi	r25, 0x08	; 8
     892:	da dc       	rcall	.-1612   	; 0x248 <ds3231_set_oscillator>
     894:	88 23       	and	r24, r24
     896:	61 f0       	breq	.+24     	; 0x8b0 <ds3231_basic_init+0x8e>
     898:	81 e9       	ldi	r24, 0x91	; 145
     89a:	96 e0       	ldi	r25, 0x06	; 6
     89c:	9f 93       	push	r25
     89e:	8f 93       	push	r24
     8a0:	ea d0       	rcall	.+468    	; 0xa76 <ds3231_interface_debug_print>
     8a2:	8e e3       	ldi	r24, 0x3E	; 62
     8a4:	98 e0       	ldi	r25, 0x08	; 8
     8a6:	4a df       	rcall	.-364    	; 0x73c <ds3231_deinit>
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	86 c0       	rjmp	.+268    	; 0x9bc <__stack+0xbd>
     8b0:	40 e0       	ldi	r20, 0x00	; 0
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	8e e3       	ldi	r24, 0x3E	; 62
     8b6:	98 e0       	ldi	r25, 0x08	; 8
     8b8:	17 dd       	rcall	.-1490   	; 0x2e8 <ds3231_set_alarm_interrupt>
     8ba:	88 23       	and	r24, r24
     8bc:	61 f0       	breq	.+24     	; 0x8d6 <ds3231_basic_init+0xb4>
     8be:	81 eb       	ldi	r24, 0xB1	; 177
     8c0:	96 e0       	ldi	r25, 0x06	; 6
     8c2:	9f 93       	push	r25
     8c4:	8f 93       	push	r24
     8c6:	d7 d0       	rcall	.+430    	; 0xa76 <ds3231_interface_debug_print>
     8c8:	8e e3       	ldi	r24, 0x3E	; 62
     8ca:	98 e0       	ldi	r25, 0x08	; 8
     8cc:	37 df       	rcall	.-402    	; 0x73c <ds3231_deinit>
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	73 c0       	rjmp	.+230    	; 0x9bc <__stack+0xbd>
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	8e e3       	ldi	r24, 0x3E	; 62
     8dc:	98 e0       	ldi	r25, 0x08	; 8
     8de:	04 dd       	rcall	.-1528   	; 0x2e8 <ds3231_set_alarm_interrupt>
     8e0:	88 23       	and	r24, r24
     8e2:	61 f0       	breq	.+24     	; 0x8fc <ds3231_basic_init+0xda>
     8e4:	87 ed       	ldi	r24, 0xD7	; 215
     8e6:	96 e0       	ldi	r25, 0x06	; 6
     8e8:	9f 93       	push	r25
     8ea:	8f 93       	push	r24
     8ec:	c4 d0       	rcall	.+392    	; 0xa76 <ds3231_interface_debug_print>
     8ee:	8e e3       	ldi	r24, 0x3E	; 62
     8f0:	98 e0       	ldi	r25, 0x08	; 8
     8f2:	24 df       	rcall	.-440    	; 0x73c <ds3231_deinit>
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	60 c0       	rjmp	.+192    	; 0x9bc <__stack+0xbd>
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	8e e3       	ldi	r24, 0x3E	; 62
     900:	98 e0       	ldi	r25, 0x08	; 8
     902:	52 dd       	rcall	.-1372   	; 0x3a8 <ds3231_set_pin>
     904:	88 23       	and	r24, r24
     906:	61 f0       	breq	.+24     	; 0x920 <__stack+0x21>
     908:	8d ef       	ldi	r24, 0xFD	; 253
     90a:	96 e0       	ldi	r25, 0x06	; 6
     90c:	9f 93       	push	r25
     90e:	8f 93       	push	r24
     910:	b2 d0       	rcall	.+356    	; 0xa76 <ds3231_interface_debug_print>
     912:	8e e3       	ldi	r24, 0x3E	; 62
     914:	98 e0       	ldi	r25, 0x08	; 8
     916:	12 df       	rcall	.-476    	; 0x73c <ds3231_deinit>
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	4e c0       	rjmp	.+156    	; 0x9bc <__stack+0xbd>
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	8e e3       	ldi	r24, 0x3E	; 62
     924:	98 e0       	ldi	r25, 0x08	; 8
     926:	8e dd       	rcall	.-1252   	; 0x444 <ds3231_set_square_wave>
     928:	88 23       	and	r24, r24
     92a:	61 f0       	breq	.+24     	; 0x944 <__stack+0x45>
     92c:	86 e1       	ldi	r24, 0x16	; 22
     92e:	97 e0       	ldi	r25, 0x07	; 7
     930:	9f 93       	push	r25
     932:	8f 93       	push	r24
     934:	a0 d0       	rcall	.+320    	; 0xa76 <ds3231_interface_debug_print>
     936:	8e e3       	ldi	r24, 0x3E	; 62
     938:	98 e0       	ldi	r25, 0x08	; 8
     93a:	00 df       	rcall	.-512    	; 0x73c <ds3231_deinit>
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	3c c0       	rjmp	.+120    	; 0x9bc <__stack+0xbd>
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	8e e3       	ldi	r24, 0x3E	; 62
     948:	98 e0       	ldi	r25, 0x08	; 8
     94a:	1c df       	rcall	.-456    	; 0x784 <ds3231_set_32khz_output>
     94c:	88 23       	and	r24, r24
     94e:	61 f0       	breq	.+24     	; 0x968 <__stack+0x69>
     950:	87 e3       	ldi	r24, 0x37	; 55
     952:	97 e0       	ldi	r25, 0x07	; 7
     954:	9f 93       	push	r25
     956:	8f 93       	push	r24
     958:	8e d0       	rcall	.+284    	; 0xa76 <ds3231_interface_debug_print>
     95a:	8e e3       	ldi	r24, 0x3E	; 62
     95c:	98 e0       	ldi	r25, 0x08	; 8
     95e:	ee de       	rcall	.-548    	; 0x73c <ds3231_deinit>
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	2a c0       	rjmp	.+84     	; 0x9bc <__stack+0xbd>
     968:	9e 01       	movw	r18, r28
     96a:	2f 5f       	subi	r18, 0xFF	; 255
     96c:	3f 4f       	sbci	r19, 0xFF	; 255
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	ba 01       	movw	r22, r20
     974:	8e e3       	ldi	r24, 0x3E	; 62
     976:	98 e0       	ldi	r25, 0x08	; 8
     978:	db dd       	rcall	.-1098   	; 0x530 <ds3231_aging_offset_convert_to_register>
     97a:	88 23       	and	r24, r24
     97c:	61 f0       	breq	.+24     	; 0x996 <__stack+0x97>
     97e:	89 e5       	ldi	r24, 0x59	; 89
     980:	97 e0       	ldi	r25, 0x07	; 7
     982:	9f 93       	push	r25
     984:	8f 93       	push	r24
     986:	77 d0       	rcall	.+238    	; 0xa76 <ds3231_interface_debug_print>
     988:	8e e3       	ldi	r24, 0x3E	; 62
     98a:	98 e0       	ldi	r25, 0x08	; 8
     98c:	d7 de       	rcall	.-594    	; 0x73c <ds3231_deinit>
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	13 c0       	rjmp	.+38     	; 0x9bc <__stack+0xbd>
     996:	69 81       	ldd	r22, Y+1	; 0x01
     998:	8e e3       	ldi	r24, 0x3E	; 62
     99a:	98 e0       	ldi	r25, 0x08	; 8
     99c:	a2 dd       	rcall	.-1212   	; 0x4e2 <ds3231_set_aging_offset>
     99e:	88 23       	and	r24, r24
     9a0:	61 f0       	breq	.+24     	; 0x9ba <__stack+0xbb>
     9a2:	8e e7       	ldi	r24, 0x7E	; 126
     9a4:	97 e0       	ldi	r25, 0x07	; 7
     9a6:	9f 93       	push	r25
     9a8:	8f 93       	push	r24
     9aa:	65 d0       	rcall	.+202    	; 0xa76 <ds3231_interface_debug_print>
     9ac:	8e e3       	ldi	r24, 0x3E	; 62
     9ae:	98 e0       	ldi	r25, 0x08	; 8
     9b0:	c5 de       	rcall	.-630    	; 0x73c <ds3231_deinit>
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <__stack+0xbd>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	0f 90       	pop	r0
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	08 95       	ret

000009c4 <ds3231_basic_get_time>:
 * @note       none
 */
uint8_t ds3231_basic_get_time(ds3231_time_t *t)
{
    /* get time */
    if (ds3231_get_time(&gs_handle, t) != 0)
     9c4:	bc 01       	movw	r22, r24
     9c6:	8e e3       	ldi	r24, 0x3E	; 62
     9c8:	98 e0       	ldi	r25, 0x08	; 8
     9ca:	a1 db       	rcall	.-2238   	; 0x10e <ds3231_get_time>
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	81 11       	cpse	r24, r1
     9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <ds3231_basic_get_time+0x10>
     9d2:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
     9d4:	89 2f       	mov	r24, r25
     9d6:	08 95       	ret

000009d8 <ds3231_interface_iic_init>:
 * @note   none
 */
uint8_t ds3231_interface_iic_init(void)
{
	/* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
	TWSR = 0;                         /* no prescaler */
     9d8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     9dc:	88 e4       	ldi	r24, 0x48	; 72
     9de:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

    return 0;
}
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	08 95       	ret

000009e6 <ds3231_interface_iic_deinit>:
 */
uint8_t ds3231_interface_iic_deinit(void)
{
	
    return 0;
}
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	08 95       	ret

000009ea <ds3231_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t ds3231_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
     9ea:	af 92       	push	r10
     9ec:	bf 92       	push	r11
     9ee:	cf 92       	push	r12
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
	for (uint8_t i = 0; i < len; i++)
     9fe:	21 15       	cp	r18, r1
     a00:	31 05       	cpc	r19, r1
     a02:	e1 f0       	breq	.+56     	; 0xa3c <ds3231_interface_iic_read+0x52>
     a04:	79 01       	movw	r14, r18
     a06:	6a 01       	movw	r12, r20
     a08:	b6 2e       	mov	r11, r22
	{
		i2c_rep_start((addr<<1)+I2C_WRITE);
     a0a:	08 2f       	mov	r16, r24
     a0c:	00 0f       	add	r16, r16
		i2c_write(reg);
		/* Send START condition with SLA+R */
		i2c_rep_start((addr<<1)+I2C_READ);
     a0e:	aa 24       	eor	r10, r10
     a10:	a3 94       	inc	r10
     a12:	a0 0e       	add	r10, r16
     a14:	16 2f       	mov	r17, r22
     a16:	c0 e0       	ldi	r28, 0x00	; 0
     a18:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t ds3231_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
	for (uint8_t i = 0; i < len; i++)
	{
		i2c_rep_start((addr<<1)+I2C_WRITE);
     a1a:	80 2f       	mov	r24, r16
     a1c:	5b d0       	rcall	.+182    	; 0xad4 <i2c_rep_start>
		i2c_write(reg);
     a1e:	81 2f       	mov	r24, r17
     a20:	5b d0       	rcall	.+182    	; 0xad8 <i2c_write>
		/* Send START condition with SLA+R */
		i2c_rep_start((addr<<1)+I2C_READ);
     a22:	8a 2d       	mov	r24, r10
     a24:	57 d0       	rcall	.+174    	; 0xad4 <i2c_rep_start>
		/* Receive data */
		buf[i] = i2c_readNak();
     a26:	cc 0d       	add	r28, r12
     a28:	dd 1d       	adc	r29, r13
     a2a:	68 d0       	rcall	.+208    	; 0xafc <i2c_readNak>
     a2c:	88 83       	st	Y, r24
     a2e:	1f 5f       	subi	r17, 0xFF	; 255
		reg += 1;
     a30:	c1 2f       	mov	r28, r17
 *             - 1 read failed
 * @note       none
 */
uint8_t ds3231_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
	for (uint8_t i = 0; i < len; i++)
     a32:	cb 19       	sub	r28, r11
     a34:	d0 e0       	ldi	r29, 0x00	; 0
     a36:	ce 15       	cp	r28, r14
     a38:	df 05       	cpc	r29, r15
     a3a:	78 f3       	brcs	.-34     	; 0xa1a <ds3231_interface_iic_read+0x30>
     a3c:	80 e0       	ldi	r24, 0x00	; 0
		/* Receive data */
		buf[i] = i2c_readNak();
		reg += 1;
	}
    return 0;
}
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	df 90       	pop	r13
     a4c:	cf 90       	pop	r12
     a4e:	bf 90       	pop	r11
     a50:	af 90       	pop	r10
     a52:	08 95       	ret

00000a54 <ds3231_interface_iic_write>:
     a54:	1f 93       	push	r17
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t ds3231_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	16 2f       	mov	r17, r22
     a5c:	ea 01       	movw	r28, r20
	i2c_rep_start((addr<<1)+I2C_WRITE);
     a5e:	88 0f       	add	r24, r24
     a60:	39 d0       	rcall	.+114    	; 0xad4 <i2c_rep_start>
	i2c_write(reg);
     a62:	81 2f       	mov	r24, r17
     a64:	39 d0       	rcall	.+114    	; 0xad8 <i2c_write>
	/* Write data */
	i2c_write(*buf);
     a66:	88 81       	ld	r24, Y
     a68:	37 d0       	rcall	.+110    	; 0xad8 <i2c_write>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
	
    return 0;
}
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	08 95       	ret

00000a74 <ds3231_interface_delay_ms>:
     a74:	08 95       	ret

00000a76 <ds3231_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void ds3231_interface_debug_print(const char *const fmt, ...)
{
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
    
}
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <ds3231_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type is the interrupt type
 * @note      none
 */
void ds3231_interface_receive_callback(uint8_t type)
{
     a84:	08 95       	ret

00000a86 <i2c_start>:
		if( twst == TW_SR_DATA_ACK)
		{
			return TWDR;
		}
	}
}
     a86:	94 ea       	ldi	r25, 0xA4	; 164
     a88:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     a8c:	ec eb       	ldi	r30, 0xBC	; 188
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	90 81       	ld	r25, Z
     a92:	99 23       	and	r25, r25
     a94:	ec f7       	brge	.-6      	; 0xa90 <i2c_start+0xa>
     a96:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     a9a:	98 7f       	andi	r25, 0xF8	; 248
     a9c:	98 30       	cpi	r25, 0x08	; 8
     a9e:	11 f0       	breq	.+4      	; 0xaa4 <i2c_start+0x1e>
     aa0:	90 31       	cpi	r25, 0x10	; 16
     aa2:	a1 f4       	brne	.+40     	; 0xacc <i2c_start+0x46>
     aa4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     aa8:	84 e8       	ldi	r24, 0x84	; 132
     aaa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     aae:	ec eb       	ldi	r30, 0xBC	; 188
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	88 23       	and	r24, r24
     ab6:	ec f7       	brge	.-6      	; 0xab2 <i2c_start+0x2c>
     ab8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     abc:	98 7f       	andi	r25, 0xF8	; 248
     abe:	98 31       	cpi	r25, 0x18	; 24
     ac0:	39 f0       	breq	.+14     	; 0xad0 <i2c_start+0x4a>
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 34       	cpi	r25, 0x40	; 64
     ac6:	29 f4       	brne	.+10     	; 0xad2 <i2c_start+0x4c>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	08 95       	ret
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	08 95       	ret
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	08 95       	ret

00000ad4 <i2c_rep_start>:
     ad4:	d8 cf       	rjmp	.-80     	; 0xa86 <i2c_start>
     ad6:	08 95       	ret

00000ad8 <i2c_write>:
     ad8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     adc:	84 e8       	ldi	r24, 0x84	; 132
     ade:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     ae2:	ec eb       	ldi	r30, 0xBC	; 188
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	88 23       	and	r24, r24
     aea:	ec f7       	brge	.-6      	; 0xae6 <i2c_write+0xe>
     aec:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     af0:	98 7f       	andi	r25, 0xF8	; 248
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	98 32       	cpi	r25, 0x28	; 40
     af6:	09 f4       	brne	.+2      	; 0xafa <i2c_write+0x22>
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	08 95       	ret

00000afc <i2c_readNak>:
Outputs:	Data received from I2C device
Description:Receives and returns the data from I2C device.
******************************************************************** */
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     afc:	84 e8       	ldi	r24, 0x84	; 132
     afe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     b02:	ec eb       	ldi	r30, 0xBC	; 188
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	80 81       	ld	r24, Z
     b08:	88 23       	and	r24, r24
     b0a:	ec f7       	brge	.-6      	; 0xb06 <i2c_readNak+0xa>
	
	return TWDR;
     b0c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
     b10:	08 95       	ret

00000b12 <configLCDPorts>:
Description:maps the data and control pins to the uC i/o ports
******************************************************************** */
void configLCDPorts(void)
{
	/* configure the microprocessor pins for the data lines */
	lcd_Data_DDR |= (1<<lcd_D7_bit) | (1<<lcd_D6_bit) | (1<<lcd_D5_bit) | (1<<lcd_D4_bit);
     b12:	8a b1       	in	r24, 0x0a	; 10
     b14:	80 6f       	ori	r24, 0xF0	; 240
     b16:	8a b9       	out	0x0a, r24	; 10
	
	/* configure the microprocessor pins for the control lines */
	lcd_Ctlr_DDR |= (1<<lcd_RW_bit) | (1<<lcd_RS_bit) | (1<<lcd_E_bit);
     b18:	8a b1       	in	r24, 0x0a	; 10
     b1a:	8b 60       	ori	r24, 0x0B	; 11
     b1c:	8a b9       	out	0x0a, r24	; 10
	
	/* Turn on LCD */
	DDRB |= (1<<lcd_ONOFF_bit);
     b1e:	20 9a       	sbi	0x04, 0	; 4
     b20:	08 95       	ret

00000b22 <lcd_write_4>:
			RS is configured for the expected register
			E is low, RW is low
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	00 d0       	rcall	.+0      	; 0xb28 <lcd_write_4+0x6>
     b28:	00 d0       	rcall	.+0      	; 0xb2a <lcd_write_4+0x8>
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
	uint8_t mask[4] = {0};
     b2e:	19 82       	std	Y+1, r1	; 0x01
     b30:	1a 82       	std	Y+2, r1	; 0x02
     b32:	1b 82       	std	Y+3, r1	; 0x03
     b34:	1c 82       	std	Y+4, r1	; 0x04
     b36:	fe 01       	movw	r30, r28
     b38:	31 96       	adiw	r30, 0x01	; 1
     b3a:	27 e0       	ldi	r18, 0x07	; 7
     b3c:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
     b3e:	90 e0       	ldi	r25, 0x00	; 0
		{
			mask[i] = 1;
     b40:	61 e0       	ldi	r22, 0x01	; 1
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
     b42:	ac 01       	movw	r20, r24
     b44:	02 2e       	mov	r0, r18
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <lcd_write_4+0x2a>
     b48:	55 95       	asr	r21
     b4a:	47 95       	ror	r20
     b4c:	0a 94       	dec	r0
     b4e:	e2 f7       	brpl	.-8      	; 0xb48 <lcd_write_4+0x26>
     b50:	40 fd       	sbrc	r20, 0
		{
			mask[i] = 1;
     b52:	60 83       	st	Z, r22
     b54:	21 50       	subi	r18, 0x01	; 1
     b56:	31 09       	sbc	r19, r1
     b58:	31 96       	adiw	r30, 0x01	; 1
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
     b5a:	23 30       	cpi	r18, 0x03	; 3
     b5c:	31 05       	cpc	r19, r1
     b5e:	89 f7       	brne	.-30     	; 0xb42 <lcd_write_4+0x20>
			mask[i] = 1;
		}
	}
	
	/* Clear bits in first step */
	lcd_Data_Port &= ~((1 << lcd_D7_bit) | (1 << lcd_D6_bit) | (1 << lcd_D5_bit) | (1 << lcd_D4_bit));
     b60:	8b b1       	in	r24, 0x0b	; 11
     b62:	8f 70       	andi	r24, 0x0F	; 15
     b64:	8b b9       	out	0x0b, r24	; 11

	/* Set bits where necessary */
	lcd_Data_Port |= ((mask[0]) << lcd_D7_bit | (mask[1]) << lcd_D6_bit | (mask[2]) << lcd_D5_bit | (mask[3]) << lcd_D4_bit);
     b66:	2b b1       	in	r18, 0x0b	; 11
     b68:	49 81       	ldd	r20, Y+1	; 0x01
     b6a:	30 e8       	ldi	r19, 0x80	; 128
     b6c:	43 9f       	mul	r20, r19
     b6e:	c0 01       	movw	r24, r0
     b70:	11 24       	eor	r1, r1
     b72:	9a 81       	ldd	r25, Y+2	; 0x02
     b74:	30 e4       	ldi	r19, 0x40	; 64
     b76:	93 9f       	mul	r25, r19
     b78:	a0 01       	movw	r20, r0
     b7a:	11 24       	eor	r1, r1
     b7c:	48 2b       	or	r20, r24
     b7e:	42 2b       	or	r20, r18
     b80:	9b 81       	ldd	r25, Y+3	; 0x03
     b82:	80 e2       	ldi	r24, 0x20	; 32
     b84:	98 9f       	mul	r25, r24
     b86:	90 01       	movw	r18, r0
     b88:	11 24       	eor	r1, r1
     b8a:	24 2b       	or	r18, r20
     b8c:	9c 81       	ldd	r25, Y+4	; 0x04
     b8e:	30 e1       	ldi	r19, 0x10	; 16
     b90:	93 9f       	mul	r25, r19
     b92:	c0 01       	movw	r24, r0
     b94:	11 24       	eor	r1, r1
     b96:	82 2b       	or	r24, r18
     b98:	8b b9       	out	0x0b, r24	; 11

    /* Write the data */
    enable_E_Pin;                   // Enable pin high
     b9a:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b9c:	85 e0       	ldi	r24, 0x05	; 5
     b9e:	8a 95       	dec	r24
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <lcd_write_4+0x7c>
     ba2:	00 00       	nop
    _delay_us(1);                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    disable_E_Pin;                  // Enable pin low
     ba4:	5b 98       	cbi	0x0b, 3	; 11
     ba6:	35 e0       	ldi	r19, 0x05	; 5
     ba8:	3a 95       	dec	r19
     baa:	f1 f7       	brne	.-4      	; 0xba8 <lcd_write_4+0x86>
     bac:	00 00       	nop
    _delay_us(1);                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	08 95       	ret

00000bbc <lcd_write_character_4f>:
Outputs:	none
Description:sends a byte to the LCD data register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_character_4f(uint8_t theChar)
{
     bbc:	cf 93       	push	r28
     bbe:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
     bc0:	58 98       	cbi	0x0b, 0	; 11
    set_RS_HIGH_Data;					// Select the Data Register (RS high)
     bc2:	59 9a       	sbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
     bc4:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theChar);				// Write the upper 4-bits of the data
     bc6:	ad df       	rcall	.-166    	; 0xb22 <lcd_write_4>
    lcd_write_4(theChar << 4);			// Write the lower 4-bits of the data
     bc8:	8c 2f       	mov	r24, r28
     bca:	82 95       	swap	r24
     bcc:	80 7f       	andi	r24, 0xF0	; 240
     bce:	a9 df       	rcall	.-174    	; 0xb22 <lcd_write_4>
}
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <lcd_write_instruction_4f>:
Outputs:	none
Description:sends a byte to the LCD instruction register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_instruction_4f(uint8_t theInstruction)
{
     bd4:	cf 93       	push	r28
     bd6:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
     bd8:	58 98       	cbi	0x0b, 0	; 11
    set_RS_LOW_Instr;					// Select the Data Register (RS high)
     bda:	59 98       	cbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
     bdc:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);		// Write the upper 4-bits of the data
     bde:	a1 df       	rcall	.-190    	; 0xb22 <lcd_write_4>
    lcd_write_4(theInstruction << 4);	// Write the lower 4-bits of the data
     be0:	8c 2f       	mov	r24, r28
     be2:	82 95       	swap	r24
     be4:	80 7f       	andi	r24, 0xF0	; 240
     be6:	9d df       	rcall	.-198    	; 0xb22 <lcd_write_4>
}
     be8:	cf 91       	pop	r28
     bea:	08 95       	ret

00000bec <lcd_check_BF_4>:
void lcd_check_BF_4(void)
{
	
    uint8_t busy_flag_copy;             // busy flag 'mirror'

    set_D7_input;						// set D7 data direction to input
     bec:	57 98       	cbi	0x0a, 7	; 10
    set_RS_LOW_Instr;					// select the Instruction Register (RS low)
     bee:	59 98       	cbi	0x0b, 1	; 11
    set_RW_HIGH_read;					// read from LCD module (RW high)
     bf0:	58 9a       	sbi	0x0b, 0	; 11

    do
    {
        busy_flag_copy = 0;                         // initialize busy flag 'mirror'
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
     bf2:	5b 9a       	sbi	0x0b, 3	; 11
     bf4:	85 e0       	ldi	r24, 0x05	; 5
     bf6:	8a 95       	dec	r24
     bf8:	f1 f7       	brne	.-4      	; 0xbf6 <lcd_check_BF_4+0xa>
     bfa:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)

        busy_flag_copy |= (lcd_D7_pin & (1<<lcd_D7_bit));  // get actual busy flag status
     bfc:	89 b1       	in	r24, 0x09	; 9

        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
     bfe:	5b 98       	cbi	0x0b, 3	; 11
     c00:	95 e0       	ldi	r25, 0x05	; 5
     c02:	9a 95       	dec	r25
     c04:	f1 f7       	brne	.-4      	; 0xc02 <lcd_check_BF_4+0x16>
     c06:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time' (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )
        
// read and discard alternate nibbles (D3 information)
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
     c08:	5b 9a       	sbi	0x0b, 3	; 11
     c0a:	95 e0       	ldi	r25, 0x05	; 5
     c0c:	9a 95       	dec	r25
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <lcd_check_BF_4+0x20>
     c10:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)
        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
     c12:	5b 98       	cbi	0x0b, 3	; 11
     c14:	95 e0       	ldi	r25, 0x05	; 5
     c16:	9a 95       	dec	r25
     c18:	f1 f7       	brne	.-4      	; 0xc16 <lcd_check_BF_4+0x2a>
     c1a:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )

    } while (busy_flag_copy);                       // check again if busy flag was high
     c1c:	88 23       	and	r24, r24
     c1e:	4c f3       	brlt	.-46     	; 0xbf2 <lcd_check_BF_4+0x6>

// arrive here if busy flag is clear -  clean up and return 
    set_RW_LOW_write;               // write to LCD module (RW low)
     c20:	58 98       	cbi	0x0b, 0	; 11
    set_D7_output;                  // reset D7 data direction to output	
     c22:	57 9a       	sbi	0x0a, 7	; 10
     c24:	08 95       	ret

00000c26 <lcd_init_4f>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c26:	2f ef       	ldi	r18, 0xFF	; 255
     c28:	81 ee       	ldi	r24, 0xE1	; 225
     c2a:	94 e0       	ldi	r25, 0x04	; 4
     c2c:	21 50       	subi	r18, 0x01	; 1
     c2e:	80 40       	sbci	r24, 0x00	; 0
     c30:	90 40       	sbci	r25, 0x00	; 0
     c32:	e1 f7       	brne	.-8      	; 0xc2c <lcd_init_4f+0x6>
     c34:	00 c0       	rjmp	.+0      	; 0xc36 <lcd_init_4f+0x10>
     c36:	00 00       	nop
	 this instruction can be sent on just the four available data lines and it will be interpreted
	 properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
	 control lines have previously been configured properly. */

	/* Set up the RS, E, and RW lines for the 'lcd_write_4' function. */
	set_RS_LOW_Instr;	// Select the Instruction Register (RS low)
     c38:	59 98       	cbi	0x0b, 1	; 11
	disable_E_Pin;		// Make sure E is initially low
     c3a:	5b 98       	cbi	0x0b, 3	; 11
	set_RW_LOW_write;	// write to LCD module (RW low)
     c3c:	58 98       	cbi	0x0b, 0	; 11

	/* Reset the LCD controller */
	lcd_write_4(lcd_FunctionReset);		// First part of reset sequence
     c3e:	80 e3       	ldi	r24, 0x30	; 48
     c40:	70 df       	rcall	.-288    	; 0xb22 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c42:	25 e3       	ldi	r18, 0x35	; 53
     c44:	2a 95       	dec	r18
     c46:	f1 f7       	brne	.-4      	; 0xc44 <lcd_init_4f+0x1e>
     c48:	00 00       	nop
	_delay_us(10);                      // Delay of 10 us
	
	lcd_write_4(lcd_FunctionReset);		// Second part of reset sequence
     c4a:	80 e3       	ldi	r24, 0x30	; 48
     c4c:	6a df       	rcall	.-300    	; 0xb22 <lcd_write_4>
     c4e:	8f e1       	ldi	r24, 0x1F	; 31
     c50:	93 e0       	ldi	r25, 0x03	; 3
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	f1 f7       	brne	.-4      	; 0xc52 <lcd_init_4f+0x2c>
     c56:	00 c0       	rjmp	.+0      	; 0xc58 <lcd_init_4f+0x32>
	_delay_us(200);						// Delay of 200 us

	lcd_write_4(lcd_FunctionReset);		// Third part of reset sequence
     c58:	00 00       	nop
     c5a:	80 e3       	ldi	r24, 0x30	; 48
     c5c:	62 df       	rcall	.-316    	; 0xb22 <lcd_write_4>
     c5e:	8f e3       	ldi	r24, 0x3F	; 63
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <lcd_init_4f+0x3c>
     c66:	00 c0       	rjmp	.+0      	; 0xc68 <lcd_init_4f+0x42>
	/* Preliminary Function Set instruction - used only to set the 4-bit mode.
	 The number of lines or the font cannot be set at this time since the controller is still in the
	 8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
	 of the upper four bits of the instruction. */
	
	lcd_write_4(lcd_FunctionSet4bit);	// Set 4-bit mode
     c68:	00 00       	nop
     c6a:	88 e2       	ldi	r24, 0x28	; 40
	// From this point on the busy flag is available

	// Function Set instruction
	lcd_check_BF_4();    // Makes sure LCD controller is ready
     c6c:	5a df       	rcall	.-332    	; 0xb22 <lcd_write_4>
                         
	lcd_write_instruction_4f(lcd_FunctionSet4bit);  // Set mode, lines, and font
     c6e:	be df       	rcall	.-132    	; 0xbec <lcd_check_BF_4>
     c70:	88 e2       	ldi	r24, 0x28	; 40
	/*The next three instructions are specified in the data sheet as part of the initialization routine,
	  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
	  later if the application requires a different configuration.*/

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
     c72:	b0 df       	rcall	.-160    	; 0xbd4 <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOff);       // Turn display OFF
     c74:	bb df       	rcall	.-138    	; 0xbec <lcd_check_BF_4>

	/* Clear Display instruction */
	lcd_check_BF_4();
     c76:	88 e0       	ldi	r24, 0x08	; 8
	lcd_write_instruction_4f(lcd_Clear);            // Clear display RAM
     c78:	ad df       	rcall	.-166    	; 0xbd4 <lcd_write_instruction_4f>
     c7a:	b8 df       	rcall	.-144    	; 0xbec <lcd_check_BF_4>
     c7c:	81 e0       	ldi	r24, 0x01	; 1
	
	/* Entry Mode Set instruction */
	lcd_check_BF_4();
     c7e:	aa df       	rcall	.-172    	; 0xbd4 <lcd_write_instruction_4f>
     c80:	b5 df       	rcall	.-150    	; 0xbec <lcd_check_BF_4>
	lcd_write_instruction_4f(lcd_EntryMode);        // Set desired shift characteristics
     c82:	86 e0       	ldi	r24, 0x06	; 6
     c84:	a7 df       	rcall	.-178    	; 0xbd4 <lcd_write_instruction_4f>
     c86:	b2 df       	rcall	.-156    	; 0xbec <lcd_check_BF_4>
	/*This is the end of the LCD controller initialization as specified in the data sheet, but the display
	  has been left in the OFF condition.  This is a good time to turn the display back ON. */

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
     c88:	8c e0       	ldi	r24, 0x0C	; 12
     c8a:	a4 cf       	rjmp	.-184    	; 0xbd4 <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOn);        // turn the display ON
     c8c:	08 95       	ret

00000c8e <initLCD>:
     c8e:	41 df       	rcall	.-382    	; 0xb12 <configLCDPorts>
     c90:	ca df       	rcall	.-108    	; 0xc26 <lcd_init_4f>
     c92:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c94:	81 ee       	ldi	r24, 0xE1	; 225
     c96:	94 e0       	ldi	r25, 0x04	; 4
     c98:	21 50       	subi	r18, 0x01	; 1
     c9a:	80 40       	sbci	r24, 0x00	; 0
     c9c:	90 40       	sbci	r25, 0x00	; 0
     c9e:	e1 f7       	brne	.-8      	; 0xc98 <initLCD+0xa>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <initLCD+0x14>
     ca2:	00 00       	nop
     ca4:	08 95       	ret

00000ca6 <lcd_write_string_4f>:
     ca6:	0f 93       	push	r16
Inputs:		string to be displayed (stringData)
Outputs:	none
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <lcd_write_string_4f+0xa>
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // Character counter
     cb6:	1a 82       	std	Y+2, r1	; 0x02
     cb8:	19 82       	std	Y+1, r1	; 0x01
    while (stringData[i] != 0)
     cba:	e9 81       	ldd	r30, Y+1	; 0x01
     cbc:	fa 81       	ldd	r31, Y+2	; 0x02
     cbe:	e8 0f       	add	r30, r24
     cc0:	f9 1f       	adc	r31, r25
     cc2:	80 81       	ld	r24, Z
     cc4:	88 23       	and	r24, r24
     cc6:	99 f0       	breq	.+38     	; 0xcee <lcd_write_string_4f+0x48>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
     cc8:	91 df       	rcall	.-222    	; 0xbec <lcd_check_BF_4>
        lcd_write_character_4f(stringData[i]);
     cca:	e9 81       	ldd	r30, Y+1	; 0x01
     ccc:	fa 81       	ldd	r31, Y+2	; 0x02
     cce:	e0 0f       	add	r30, r16
     cd0:	f1 1f       	adc	r31, r17
     cd2:	80 81       	ld	r24, Z
     cd4:	73 df       	rcall	.-282    	; 0xbbc <lcd_write_character_4f>
        i++;
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	9a 83       	std	Y+2, r25	; 0x02
     cde:	89 83       	std	Y+1, r24	; 0x01
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
    volatile int i = 0;                             // Character counter
    while (stringData[i] != 0)
     ce0:	e9 81       	ldd	r30, Y+1	; 0x01
     ce2:	fa 81       	ldd	r31, Y+2	; 0x02
     ce4:	e0 0f       	add	r30, r16
     ce6:	f1 1f       	adc	r31, r17
     ce8:	80 81       	ld	r24, Z
     cea:	81 11       	cpse	r24, r1
     cec:	ed cf       	rjmp	.-38     	; 0xcc8 <lcd_write_string_4f+0x22>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
        lcd_write_character_4f(stringData[i]);
        i++;
    }
}
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	08 95       	ret

00000cfc <updateLCDScreen>:
Inputs:		two pointers to a uint8 type data and 2 values, one for each row
Outputs:	none
Description:commands writing on LCD line by line 
******************************************************************** */
void updateLCDScreen(uint8_t row, char * s1, uint8_t data, char * s2)
{
     cfc:	df 92       	push	r13
     cfe:	ef 92       	push	r14
     d00:	ff 92       	push	r15
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	af 97       	sbiw	r28, 0x2f	; 47
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	de bf       	out	0x3e, r29	; 62
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	cd bf       	out	0x3d, r28	; 61
     d1a:	18 2f       	mov	r17, r24
     d1c:	d6 2e       	mov	r13, r22
     d1e:	07 2f       	mov	r16, r23
     d20:	84 2f       	mov	r24, r20
     d22:	79 01       	movw	r14, r18
	/* convert data to string [buf] */
	char data2char[4] = "   ";
     d24:	20 e2       	ldi	r18, 0x20	; 32
     d26:	30 e2       	ldi	r19, 0x20	; 32
     d28:	3a 83       	std	Y+2, r19	; 0x02
     d2a:	29 83       	std	Y+1, r18	; 0x01
     d2c:	20 e2       	ldi	r18, 0x20	; 32
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	3c 83       	std	Y+4, r19	; 0x04
     d32:	2b 83       	std	Y+3, r18	; 0x03
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
     d34:	96 e1       	ldi	r25, 0x16	; 22
     d36:	e3 e0       	ldi	r30, 0x03	; 3
     d38:	f8 e0       	ldi	r31, 0x08	; 8
     d3a:	de 01       	movw	r26, r28
     d3c:	5a 96       	adiw	r26, 0x1a	; 26
     d3e:	01 90       	ld	r0, Z+
     d40:	0d 92       	st	X+, r0
     d42:	9a 95       	dec	r25
     d44:	e1 f7       	brne	.-8      	; 0xd3e <updateLCDScreen+0x42>
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
     d46:	4f 3f       	cpi	r20, 0xFF	; 255
     d48:	31 f0       	breq	.+12     	; 0xd56 <updateLCDScreen+0x5a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d4a:	4a e0       	ldi	r20, 0x0A	; 10
     d4c:	be 01       	movw	r22, r28
     d4e:	6f 5f       	subi	r22, 0xFF	; 255
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	2e d2       	rcall	.+1116   	; 0x11b2 <__itoa_ncheck>
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
     d56:	6f ee       	ldi	r22, 0xEF	; 239
     d58:	77 e0       	ldi	r23, 0x07	; 7
     d5a:	8d 2d       	mov	r24, r13
     d5c:	90 2f       	mov	r25, r16
     d5e:	20 d2       	rcall	.+1088   	; 0x11a0 <strcmp>
     d60:	89 2b       	or	r24, r25
     d62:	09 f4       	brne	.+2      	; 0xd66 <updateLCDScreen+0x6a>
     d64:	ac c0       	rjmp	.+344    	; 0xebe <updateLCDScreen+0x1c2>
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
     d66:	6f ee       	ldi	r22, 0xEF	; 239
     d68:	77 e0       	ldi	r23, 0x07	; 7
     d6a:	c7 01       	movw	r24, r14
     d6c:	19 d2       	rcall	.+1074   	; 0x11a0 <strcmp>
     d6e:	89 2b       	or	r24, r25
     d70:	31 f4       	brne	.+12     	; 0xd7e <updateLCDScreen+0x82>
     d72:	0f 2e       	mov	r0, r31
     d74:	fa e4       	ldi	r31, 0x4A	; 74
     d76:	ef 2e       	mov	r14, r31
     d78:	f1 e0       	ldi	r31, 0x01	; 1
     d7a:	ff 2e       	mov	r15, r31
     d7c:	f0 2d       	mov	r31, r0
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
     d7e:	ce 01       	movw	r24, r28
     d80:	4a 96       	adiw	r24, 0x1a	; 26
     d82:	9f 93       	push	r25
     d84:	8f 93       	push	r24
     d86:	ff 92       	push	r15
     d88:	ef 92       	push	r14
     d8a:	49 97       	sbiw	r24, 0x19	; 25
     d8c:	9f 93       	push	r25
     d8e:	8f 93       	push	r24
     d90:	0f 93       	push	r16
     d92:	df 92       	push	r13
     d94:	84 ef       	ldi	r24, 0xF4	; 244
     d96:	97 e0       	ldi	r25, 0x07	; 7
     d98:	9f 93       	push	r25
     d9a:	8f 93       	push	r24
     d9c:	1f 92       	push	r1
     d9e:	85 e1       	ldi	r24, 0x15	; 21
     da0:	8f 93       	push	r24
     da2:	ce 01       	movw	r24, r28
     da4:	05 96       	adiw	r24, 0x05	; 5
     da6:	9f 93       	push	r25
     da8:	8f 93       	push	r24
     daa:	26 d2       	rcall	.+1100   	; 0x11f8 <snprintf>
	if (strcmp(s1, "CLEAR") == 0 ) { snprintf( charRow, sizeof charRow, "%s", emptyString ); };
     dac:	6d ef       	ldi	r22, 0xFD	; 253
     dae:	77 e0       	ldi	r23, 0x07	; 7
     db0:	8d 2d       	mov	r24, r13
     db2:	90 2f       	mov	r25, r16
     db4:	f5 d1       	rcall	.+1002   	; 0x11a0 <strcmp>
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	89 2b       	or	r24, r25
     dc2:	a9 f4       	brne	.+42     	; 0xdee <updateLCDScreen+0xf2>
     dc4:	ce 01       	movw	r24, r28
     dc6:	4a 96       	adiw	r24, 0x1a	; 26
     dc8:	9f 93       	push	r25
     dca:	8f 93       	push	r24
     dcc:	8a ef       	ldi	r24, 0xFA	; 250
     dce:	97 e0       	ldi	r25, 0x07	; 7
     dd0:	9f 93       	push	r25
     dd2:	8f 93       	push	r24
     dd4:	1f 92       	push	r1
     dd6:	85 e1       	ldi	r24, 0x15	; 21
     dd8:	8f 93       	push	r24
     dda:	ce 01       	movw	r24, r28
     ddc:	05 96       	adiw	r24, 0x05	; 5
     dde:	9f 93       	push	r25
     de0:	8f 93       	push	r24
     de2:	0a d2       	rcall	.+1044   	; 0x11f8 <snprintf>
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	cd bf       	out	0x3d, r28	; 61
		
	switch(row) {
     dee:	12 30       	cpi	r17, 0x02	; 2
     df0:	a9 f0       	breq	.+42     	; 0xe1c <updateLCDScreen+0x120>
     df2:	18 f4       	brcc	.+6      	; 0xdfa <updateLCDScreen+0xfe>
     df4:	11 30       	cpi	r17, 0x01	; 1
     df6:	31 f0       	breq	.+12     	; 0xe04 <updateLCDScreen+0x108>
     df8:	34 c0       	rjmp	.+104    	; 0xe62 <updateLCDScreen+0x166>
     dfa:	13 30       	cpi	r17, 0x03	; 3
     dfc:	d9 f0       	breq	.+54     	; 0xe34 <updateLCDScreen+0x138>
     dfe:	14 30       	cpi	r17, 0x04	; 4
     e00:	29 f1       	breq	.+74     	; 0xe4c <updateLCDScreen+0x150>
		case 1: /* ======= Line 1 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineOne); _delay_ms(50);
     e02:	2f c0       	rjmp	.+94     	; 0xe62 <updateLCDScreen+0x166>
     e04:	80 e8       	ldi	r24, 0x80	; 128
     e06:	e6 de       	rcall	.-564    	; 0xbd4 <lcd_write_instruction_4f>
     e08:	9f ef       	ldi	r25, 0xFF	; 255
     e0a:	20 e7       	ldi	r18, 0x70	; 112
     e0c:	32 e0       	ldi	r19, 0x02	; 2
     e0e:	91 50       	subi	r25, 0x01	; 1
     e10:	20 40       	sbci	r18, 0x00	; 0
     e12:	30 40       	sbci	r19, 0x00	; 0
     e14:	e1 f7       	brne	.-8      	; 0xe0e <updateLCDScreen+0x112>
     e16:	00 c0       	rjmp	.+0      	; 0xe18 <updateLCDScreen+0x11c>
     e18:	00 00       	nop
			break;
		case 2: /* ======= Line 2 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineTwo); _delay_ms(50);
     e1a:	23 c0       	rjmp	.+70     	; 0xe62 <updateLCDScreen+0x166>
     e1c:	80 ec       	ldi	r24, 0xC0	; 192
     e1e:	da de       	rcall	.-588    	; 0xbd4 <lcd_write_instruction_4f>
     e20:	8f ef       	ldi	r24, 0xFF	; 255
     e22:	90 e7       	ldi	r25, 0x70	; 112
     e24:	22 e0       	ldi	r18, 0x02	; 2
     e26:	81 50       	subi	r24, 0x01	; 1
     e28:	90 40       	sbci	r25, 0x00	; 0
     e2a:	20 40       	sbci	r18, 0x00	; 0
     e2c:	e1 f7       	brne	.-8      	; 0xe26 <updateLCDScreen+0x12a>
     e2e:	00 c0       	rjmp	.+0      	; 0xe30 <updateLCDScreen+0x134>
     e30:	00 00       	nop
			break;
		case 3: /* ======= Line 3 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineThree); _delay_ms(50);
     e32:	17 c0       	rjmp	.+46     	; 0xe62 <updateLCDScreen+0x166>
     e34:	84 e9       	ldi	r24, 0x94	; 148
     e36:	ce de       	rcall	.-612    	; 0xbd4 <lcd_write_instruction_4f>
     e38:	3f ef       	ldi	r19, 0xFF	; 255
     e3a:	80 e7       	ldi	r24, 0x70	; 112
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	31 50       	subi	r19, 0x01	; 1
     e40:	80 40       	sbci	r24, 0x00	; 0
     e42:	90 40       	sbci	r25, 0x00	; 0
     e44:	e1 f7       	brne	.-8      	; 0xe3e <updateLCDScreen+0x142>
     e46:	00 c0       	rjmp	.+0      	; 0xe48 <updateLCDScreen+0x14c>
     e48:	00 00       	nop
			break;
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
     e4a:	0b c0       	rjmp	.+22     	; 0xe62 <updateLCDScreen+0x166>
     e4c:	84 ed       	ldi	r24, 0xD4	; 212
     e4e:	c2 de       	rcall	.-636    	; 0xbd4 <lcd_write_instruction_4f>
     e50:	2f ef       	ldi	r18, 0xFF	; 255
     e52:	30 e7       	ldi	r19, 0x70	; 112
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	21 50       	subi	r18, 0x01	; 1
     e58:	30 40       	sbci	r19, 0x00	; 0
     e5a:	80 40       	sbci	r24, 0x00	; 0
     e5c:	e1 f7       	brne	.-8      	; 0xe56 <updateLCDScreen+0x15a>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <updateLCDScreen+0x164>
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
     e60:	00 00       	nop
     e62:	ce 01       	movw	r24, r28
     e64:	05 96       	adiw	r24, 0x05	; 5
     e66:	1f df       	rcall	.-450    	; 0xca6 <lcd_write_string_4f>
     e68:	9f ef       	ldi	r25, 0xFF	; 255
     e6a:	20 e7       	ldi	r18, 0x70	; 112
     e6c:	32 e0       	ldi	r19, 0x02	; 2
     e6e:	91 50       	subi	r25, 0x01	; 1
     e70:	20 40       	sbci	r18, 0x00	; 0
     e72:	30 40       	sbci	r19, 0x00	; 0
     e74:	e1 f7       	brne	.-8      	; 0xe6e <updateLCDScreen+0x172>
     e76:	00 c0       	rjmp	.+0      	; 0xe78 <updateLCDScreen+0x17c>
     e78:	00 00       	nop
}
     e7a:	46 c0       	rjmp	.+140    	; 0xf08 <updateLCDScreen+0x20c>
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
     e7c:	ce 01       	movw	r24, r28
     e7e:	4a 96       	adiw	r24, 0x1a	; 26
     e80:	9f 93       	push	r25
     e82:	8f 93       	push	r24
     e84:	8a e4       	ldi	r24, 0x4A	; 74
     e86:	91 e0       	ldi	r25, 0x01	; 1
     e88:	9f 93       	push	r25
     e8a:	8f 93       	push	r24
     e8c:	9e 01       	movw	r18, r28
     e8e:	2f 5f       	subi	r18, 0xFF	; 255
     e90:	3f 4f       	sbci	r19, 0xFF	; 255
     e92:	3f 93       	push	r19
     e94:	2f 93       	push	r18
     e96:	9f 93       	push	r25
     e98:	8f 93       	push	r24
     e9a:	84 ef       	ldi	r24, 0xF4	; 244
     e9c:	97 e0       	ldi	r25, 0x07	; 7
     e9e:	9f 93       	push	r25
     ea0:	8f 93       	push	r24
     ea2:	1f 92       	push	r1
     ea4:	85 e1       	ldi	r24, 0x15	; 21
     ea6:	8f 93       	push	r24
     ea8:	ce 01       	movw	r24, r28
     eaa:	05 96       	adiw	r24, 0x05	; 5
     eac:	9f 93       	push	r25
     eae:	8f 93       	push	r24
     eb0:	a3 d1       	rcall	.+838    	; 0x11f8 <snprintf>
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
     ebc:	98 cf       	rjmp	.-208    	; 0xdee <updateLCDScreen+0xf2>
     ebe:	6f ee       	ldi	r22, 0xEF	; 239
     ec0:	77 e0       	ldi	r23, 0x07	; 7
     ec2:	c7 01       	movw	r24, r14
     ec4:	6d d1       	rcall	.+730    	; 0x11a0 <strcmp>
     ec6:	89 2b       	or	r24, r25
     ec8:	c9 f2       	breq	.-78     	; 0xe7c <updateLCDScreen+0x180>
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
     eca:	ce 01       	movw	r24, r28
     ecc:	4a 96       	adiw	r24, 0x1a	; 26
     ece:	9f 93       	push	r25
     ed0:	8f 93       	push	r24
     ed2:	ff 92       	push	r15
     ed4:	ef 92       	push	r14
     ed6:	49 97       	sbiw	r24, 0x19	; 25
     ed8:	9f 93       	push	r25
     eda:	8f 93       	push	r24
     edc:	8a e4       	ldi	r24, 0x4A	; 74
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	9f 93       	push	r25
     ee2:	8f 93       	push	r24
     ee4:	84 ef       	ldi	r24, 0xF4	; 244
     ee6:	97 e0       	ldi	r25, 0x07	; 7
     ee8:	9f 93       	push	r25
     eea:	8f 93       	push	r24
     eec:	1f 92       	push	r1
     eee:	85 e1       	ldi	r24, 0x15	; 21
     ef0:	8f 93       	push	r24
     ef2:	ce 01       	movw	r24, r28
     ef4:	05 96       	adiw	r24, 0x05	; 5
     ef6:	9f 93       	push	r25
     ef8:	8f 93       	push	r24
     efa:	7e d1       	rcall	.+764    	; 0x11f8 <snprintf>
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	73 cf       	rjmp	.-282    	; 0xdee <updateLCDScreen+0xf2>
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
}
     f08:	af 96       	adiw	r28, 0x2f	; 47
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	df 90       	pop	r13
     f22:	08 95       	ret

00000f24 <displayLCD_main>:
Description:displays on the screen the data passed to the input
******************************************************************** */
void displayLCD_main(uint8_t drow, char * s1, uint8_t d1, char * s2)
{
	/* Write text on the LCD */
	updateLCDScreen(drow, s1, d1, s2);
     f24:	eb ce       	rjmp	.-554    	; 0xcfc <updateLCDScreen>
     f26:	08 95       	ret

00000f28 <main>:
#include "LCD.h"

uint8_t dec2bcd(uint8_t);

int main (void)
{
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	2a 97       	sbiw	r28, 0x0a	; 10
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
	ds3231_time_t t;
	
	initLCD();
     f3c:	a8 de       	rcall	.-688    	; 0xc8e <initLCD>
	ds3231_basic_init();
     f3e:	71 dc       	rcall	.-1822   	; 0x822 <ds3231_basic_init>

	/* Set alarm */
	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
     f40:	80 ed       	ldi	r24, 0xD0	; 208
     f42:	a1 dd       	rcall	.-1214   	; 0xa86 <i2c_start>
	i2c_write(DS3231_REG_ALARM1_SECOND);
     f44:	87 e0       	ldi	r24, 0x07	; 7
     f46:	c8 dd       	rcall	.-1136   	; 0xad8 <i2c_write>
	i2c_write(dec2bcd(33));	// Seconds in dec
     f48:	83 e3       	ldi	r24, 0x33	; 51
     f4a:	c6 dd       	rcall	.-1140   	; 0xad8 <i2c_write>
	
	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
     f4c:	80 ed       	ldi	r24, 0xD0	; 208
     f4e:	9b dd       	rcall	.-1226   	; 0xa86 <i2c_start>
	i2c_write(DS3231_REG_CONTROL);
     f50:	8e e0       	ldi	r24, 0x0E	; 14
     f52:	c2 dd       	rcall	.-1148   	; 0xad8 <i2c_write>
	i2c_write(0x5);		// Set bit 0 and 2 (alarm 1 and interrupt)
     f54:	85 e0       	ldi	r24, 0x05	; 5

	/* Read and display current time */
	while(1)
	{
		i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
     f56:	c0 dd       	rcall	.-1152   	; 0xad8 <i2c_write>
     f58:	80 ed       	ldi	r24, 0xD0	; 208
		i2c_write(DS3231_REG_STATUS);
     f5a:	95 dd       	rcall	.-1238   	; 0xa86 <i2c_start>
     f5c:	8f e0       	ldi	r24, 0x0F	; 15
     f5e:	bc dd       	rcall	.-1160   	; 0xad8 <i2c_write>
		/* Send START condition with SLA+R */
		i2c_rep_start((DS3231_ADDRESS<<1)+I2C_READ);
     f60:	81 ed       	ldi	r24, 0xD1	; 209
     f62:	b8 dd       	rcall	.-1168   	; 0xad4 <i2c_rep_start>
     f64:	cb dd       	rcall	.-1130   	; 0xafc <i2c_readNak>
		/* Receive data */
		uint8_t st_reg = i2c_readNak();
     f66:	18 2f       	mov	r17, r24
     f68:	ce 01       	movw	r24, r28
		
		ds3231_basic_get_time(&t);
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	2b dd       	rcall	.-1450   	; 0x9c4 <ds3231_basic_get_time>
     f6e:	11 70       	andi	r17, 0x01	; 1
     f70:	2f ee       	ldi	r18, 0xEF	; 239
		displayLCD_main(1, "Alarm flag: ", (st_reg & 0x01), "NONE");
     f72:	37 e0       	ldi	r19, 0x07	; 7
     f74:	41 2f       	mov	r20, r17
     f76:	69 e1       	ldi	r22, 0x19	; 25
     f78:	78 e0       	ldi	r23, 0x08	; 8
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	d3 df       	rcall	.-90     	; 0xf24 <displayLCD_main>
     f7e:	2f ee       	ldi	r18, 0xEF	; 239
     f80:	37 e0       	ldi	r19, 0x07	; 7
		displayLCD_main(2, "Hour: ", t.hour, "NONE");
     f82:	4e 81       	ldd	r20, Y+6	; 0x06
     f84:	66 e2       	ldi	r22, 0x26	; 38
     f86:	78 e0       	ldi	r23, 0x08	; 8
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	cc df       	rcall	.-104    	; 0xf24 <displayLCD_main>
     f8c:	2f ee       	ldi	r18, 0xEF	; 239
     f8e:	37 e0       	ldi	r19, 0x07	; 7
		displayLCD_main(3, "Minutes:", t.minute, "NONE");
     f90:	4f 81       	ldd	r20, Y+7	; 0x07
     f92:	6d e2       	ldi	r22, 0x2D	; 45
     f94:	78 e0       	ldi	r23, 0x08	; 8
     f96:	83 e0       	ldi	r24, 0x03	; 3
     f98:	c5 df       	rcall	.-118    	; 0xf24 <displayLCD_main>
     f9a:	2f ee       	ldi	r18, 0xEF	; 239
     f9c:	37 e0       	ldi	r19, 0x07	; 7
     f9e:	48 85       	ldd	r20, Y+8	; 0x08
		displayLCD_main(4, "Second:", t.second, "NONE");
     fa0:	66 e3       	ldi	r22, 0x36	; 54
     fa2:	78 e0       	ldi	r23, 0x08	; 8
     fa4:	84 e0       	ldi	r24, 0x04	; 4
     fa6:	be df       	rcall	.-132    	; 0xf24 <displayLCD_main>
     fa8:	11 23       	and	r17, r17
     faa:	b1 f2       	breq	.-84     	; 0xf58 <main+0x30>
		
		if ((st_reg & 0x01) > 0)
     fac:	2f ef       	ldi	r18, 0xFF	; 255
     fae:	83 ec       	ldi	r24, 0xC3	; 195
     fb0:	99 e0       	ldi	r25, 0x09	; 9
     fb2:	21 50       	subi	r18, 0x01	; 1
     fb4:	80 40       	sbci	r24, 0x00	; 0
     fb6:	90 40       	sbci	r25, 0x00	; 0
     fb8:	e1 f7       	brne	.-8      	; 0xfb2 <main+0x8a>
     fba:	00 c0       	rjmp	.+0      	; 0xfbc <main+0x94>
     fbc:	00 00       	nop
     fbe:	80 ed       	ldi	r24, 0xD0	; 208
     fc0:	62 dd       	rcall	.-1340   	; 0xa86 <i2c_start>
		{
			_delay_ms(200);
			i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
     fc2:	8f e0       	ldi	r24, 0x0F	; 15
     fc4:	89 dd       	rcall	.-1262   	; 0xad8 <i2c_write>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
			i2c_write(DS3231_REG_STATUS);
     fc8:	87 dd       	rcall	.-1266   	; 0xad8 <i2c_write>
     fca:	c6 cf       	rjmp	.-116    	; 0xf58 <main+0x30>

00000fcc <__divsf3>:
     fcc:	0c d0       	rcall	.+24     	; 0xfe6 <__divsf3x>
			i2c_write(0x0);
     fce:	ae c0       	rjmp	.+348    	; 0x112c <__fp_round>
     fd0:	a6 d0       	rcall	.+332    	; 0x111e <__fp_pscB>
     fd2:	40 f0       	brcs	.+16     	; 0xfe4 <__divsf3+0x18>
     fd4:	9d d0       	rcall	.+314    	; 0x1110 <__fp_pscA>
     fd6:	30 f0       	brcs	.+12     	; 0xfe4 <__divsf3+0x18>
     fd8:	21 f4       	brne	.+8      	; 0xfe2 <__divsf3+0x16>
     fda:	5f 3f       	cpi	r21, 0xFF	; 255
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <__divsf3+0x18>
     fde:	8f c0       	rjmp	.+286    	; 0x10fe <__fp_inf>
     fe0:	51 11       	cpse	r21, r1
     fe2:	d8 c0       	rjmp	.+432    	; 0x1194 <__fp_szero>
     fe4:	92 c0       	rjmp	.+292    	; 0x110a <__fp_nan>

00000fe6 <__divsf3x>:
     fe6:	b3 d0       	rcall	.+358    	; 0x114e <__fp_split3>
     fe8:	98 f3       	brcs	.-26     	; 0xfd0 <__divsf3+0x4>

00000fea <__divsf3_pse>:
     fea:	99 23       	and	r25, r25
     fec:	c9 f3       	breq	.-14     	; 0xfe0 <__divsf3+0x14>
     fee:	55 23       	and	r21, r21
     ff0:	b1 f3       	breq	.-20     	; 0xfde <__divsf3+0x12>
     ff2:	95 1b       	sub	r25, r21
     ff4:	55 0b       	sbc	r21, r21
     ff6:	bb 27       	eor	r27, r27
     ff8:	aa 27       	eor	r26, r26
     ffa:	62 17       	cp	r22, r18
     ffc:	73 07       	cpc	r23, r19
     ffe:	84 07       	cpc	r24, r20
    1000:	38 f0       	brcs	.+14     	; 0x1010 <__divsf3_pse+0x26>
    1002:	9f 5f       	subi	r25, 0xFF	; 255
    1004:	5f 4f       	sbci	r21, 0xFF	; 255
    1006:	22 0f       	add	r18, r18
    1008:	33 1f       	adc	r19, r19
    100a:	44 1f       	adc	r20, r20
    100c:	aa 1f       	adc	r26, r26
    100e:	a9 f3       	breq	.-22     	; 0xffa <__divsf3_pse+0x10>
    1010:	33 d0       	rcall	.+102    	; 0x1078 <__divsf3_pse+0x8e>
    1012:	0e 2e       	mov	r0, r30
    1014:	3a f0       	brmi	.+14     	; 0x1024 <__divsf3_pse+0x3a>
    1016:	e0 e8       	ldi	r30, 0x80	; 128
    1018:	30 d0       	rcall	.+96     	; 0x107a <__divsf3_pse+0x90>
    101a:	91 50       	subi	r25, 0x01	; 1
    101c:	50 40       	sbci	r21, 0x00	; 0
    101e:	e6 95       	lsr	r30
    1020:	00 1c       	adc	r0, r0
    1022:	ca f7       	brpl	.-14     	; 0x1016 <__divsf3_pse+0x2c>
    1024:	29 d0       	rcall	.+82     	; 0x1078 <__divsf3_pse+0x8e>
    1026:	fe 2f       	mov	r31, r30
    1028:	27 d0       	rcall	.+78     	; 0x1078 <__divsf3_pse+0x8e>
    102a:	66 0f       	add	r22, r22
    102c:	77 1f       	adc	r23, r23
    102e:	88 1f       	adc	r24, r24
    1030:	bb 1f       	adc	r27, r27
    1032:	26 17       	cp	r18, r22
    1034:	37 07       	cpc	r19, r23
    1036:	48 07       	cpc	r20, r24
    1038:	ab 07       	cpc	r26, r27
    103a:	b0 e8       	ldi	r27, 0x80	; 128
    103c:	09 f0       	breq	.+2      	; 0x1040 <__divsf3_pse+0x56>
    103e:	bb 0b       	sbc	r27, r27
    1040:	80 2d       	mov	r24, r0
    1042:	bf 01       	movw	r22, r30
    1044:	ff 27       	eor	r31, r31
    1046:	93 58       	subi	r25, 0x83	; 131
    1048:	5f 4f       	sbci	r21, 0xFF	; 255
    104a:	2a f0       	brmi	.+10     	; 0x1056 <__divsf3_pse+0x6c>
    104c:	9e 3f       	cpi	r25, 0xFE	; 254
    104e:	51 05       	cpc	r21, r1
    1050:	68 f0       	brcs	.+26     	; 0x106c <__divsf3_pse+0x82>
    1052:	55 c0       	rjmp	.+170    	; 0x10fe <__fp_inf>
    1054:	9f c0       	rjmp	.+318    	; 0x1194 <__fp_szero>
    1056:	5f 3f       	cpi	r21, 0xFF	; 255
    1058:	ec f3       	brlt	.-6      	; 0x1054 <__divsf3_pse+0x6a>
    105a:	98 3e       	cpi	r25, 0xE8	; 232
    105c:	dc f3       	brlt	.-10     	; 0x1054 <__divsf3_pse+0x6a>
    105e:	86 95       	lsr	r24
    1060:	77 95       	ror	r23
    1062:	67 95       	ror	r22
    1064:	b7 95       	ror	r27
    1066:	f7 95       	ror	r31
    1068:	9f 5f       	subi	r25, 0xFF	; 255
    106a:	c9 f7       	brne	.-14     	; 0x105e <__divsf3_pse+0x74>
    106c:	88 0f       	add	r24, r24
    106e:	91 1d       	adc	r25, r1
    1070:	96 95       	lsr	r25
    1072:	87 95       	ror	r24
    1074:	97 f9       	bld	r25, 7
    1076:	08 95       	ret
    1078:	e1 e0       	ldi	r30, 0x01	; 1
    107a:	66 0f       	add	r22, r22
    107c:	77 1f       	adc	r23, r23
    107e:	88 1f       	adc	r24, r24
    1080:	bb 1f       	adc	r27, r27
    1082:	62 17       	cp	r22, r18
    1084:	73 07       	cpc	r23, r19
    1086:	84 07       	cpc	r24, r20
    1088:	ba 07       	cpc	r27, r26
    108a:	20 f0       	brcs	.+8      	; 0x1094 <__divsf3_pse+0xaa>
    108c:	62 1b       	sub	r22, r18
    108e:	73 0b       	sbc	r23, r19
    1090:	84 0b       	sbc	r24, r20
    1092:	ba 0b       	sbc	r27, r26
    1094:	ee 1f       	adc	r30, r30
    1096:	88 f7       	brcc	.-30     	; 0x107a <__divsf3_pse+0x90>
    1098:	e0 95       	com	r30
    109a:	08 95       	ret

0000109c <__fixsfsi>:
    109c:	04 d0       	rcall	.+8      	; 0x10a6 <__fixunssfsi>
    109e:	68 94       	set
    10a0:	b1 11       	cpse	r27, r1
    10a2:	78 c0       	rjmp	.+240    	; 0x1194 <__fp_szero>
    10a4:	08 95       	ret

000010a6 <__fixunssfsi>:
    10a6:	5b d0       	rcall	.+182    	; 0x115e <__fp_splitA>
    10a8:	88 f0       	brcs	.+34     	; 0x10cc <__fixunssfsi+0x26>
    10aa:	9f 57       	subi	r25, 0x7F	; 127
    10ac:	90 f0       	brcs	.+36     	; 0x10d2 <__fixunssfsi+0x2c>
    10ae:	b9 2f       	mov	r27, r25
    10b0:	99 27       	eor	r25, r25
    10b2:	b7 51       	subi	r27, 0x17	; 23
    10b4:	a0 f0       	brcs	.+40     	; 0x10de <__fixunssfsi+0x38>
    10b6:	d1 f0       	breq	.+52     	; 0x10ec <__fixunssfsi+0x46>
    10b8:	66 0f       	add	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	88 1f       	adc	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	1a f0       	brmi	.+6      	; 0x10c8 <__fixunssfsi+0x22>
    10c2:	ba 95       	dec	r27
    10c4:	c9 f7       	brne	.-14     	; 0x10b8 <__fixunssfsi+0x12>
    10c6:	12 c0       	rjmp	.+36     	; 0x10ec <__fixunssfsi+0x46>
    10c8:	b1 30       	cpi	r27, 0x01	; 1
    10ca:	81 f0       	breq	.+32     	; 0x10ec <__fixunssfsi+0x46>
    10cc:	62 d0       	rcall	.+196    	; 0x1192 <__fp_zero>
    10ce:	b1 e0       	ldi	r27, 0x01	; 1
    10d0:	08 95       	ret
    10d2:	5f c0       	rjmp	.+190    	; 0x1192 <__fp_zero>
    10d4:	67 2f       	mov	r22, r23
    10d6:	78 2f       	mov	r23, r24
    10d8:	88 27       	eor	r24, r24
    10da:	b8 5f       	subi	r27, 0xF8	; 248
    10dc:	39 f0       	breq	.+14     	; 0x10ec <__fixunssfsi+0x46>
    10de:	b9 3f       	cpi	r27, 0xF9	; 249
    10e0:	cc f3       	brlt	.-14     	; 0x10d4 <__fixunssfsi+0x2e>
    10e2:	86 95       	lsr	r24
    10e4:	77 95       	ror	r23
    10e6:	67 95       	ror	r22
    10e8:	b3 95       	inc	r27
    10ea:	d9 f7       	brne	.-10     	; 0x10e2 <__fixunssfsi+0x3c>
    10ec:	3e f4       	brtc	.+14     	; 0x10fc <__fixunssfsi+0x56>
    10ee:	90 95       	com	r25
    10f0:	80 95       	com	r24
    10f2:	70 95       	com	r23
    10f4:	61 95       	neg	r22
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255
    10f8:	8f 4f       	sbci	r24, 0xFF	; 255
    10fa:	9f 4f       	sbci	r25, 0xFF	; 255
    10fc:	08 95       	ret

000010fe <__fp_inf>:
    10fe:	97 f9       	bld	r25, 7
    1100:	9f 67       	ori	r25, 0x7F	; 127
    1102:	80 e8       	ldi	r24, 0x80	; 128
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	08 95       	ret

0000110a <__fp_nan>:
    110a:	9f ef       	ldi	r25, 0xFF	; 255
    110c:	80 ec       	ldi	r24, 0xC0	; 192
    110e:	08 95       	ret

00001110 <__fp_pscA>:
    1110:	00 24       	eor	r0, r0
    1112:	0a 94       	dec	r0
    1114:	16 16       	cp	r1, r22
    1116:	17 06       	cpc	r1, r23
    1118:	18 06       	cpc	r1, r24
    111a:	09 06       	cpc	r0, r25
    111c:	08 95       	ret

0000111e <__fp_pscB>:
    111e:	00 24       	eor	r0, r0
    1120:	0a 94       	dec	r0
    1122:	12 16       	cp	r1, r18
    1124:	13 06       	cpc	r1, r19
    1126:	14 06       	cpc	r1, r20
    1128:	05 06       	cpc	r0, r21
    112a:	08 95       	ret

0000112c <__fp_round>:
    112c:	09 2e       	mov	r0, r25
    112e:	03 94       	inc	r0
    1130:	00 0c       	add	r0, r0
    1132:	11 f4       	brne	.+4      	; 0x1138 <__fp_round+0xc>
    1134:	88 23       	and	r24, r24
    1136:	52 f0       	brmi	.+20     	; 0x114c <__fp_round+0x20>
    1138:	bb 0f       	add	r27, r27
    113a:	40 f4       	brcc	.+16     	; 0x114c <__fp_round+0x20>
    113c:	bf 2b       	or	r27, r31
    113e:	11 f4       	brne	.+4      	; 0x1144 <__fp_round+0x18>
    1140:	60 ff       	sbrs	r22, 0
    1142:	04 c0       	rjmp	.+8      	; 0x114c <__fp_round+0x20>
    1144:	6f 5f       	subi	r22, 0xFF	; 255
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	8f 4f       	sbci	r24, 0xFF	; 255
    114a:	9f 4f       	sbci	r25, 0xFF	; 255
    114c:	08 95       	ret

0000114e <__fp_split3>:
    114e:	57 fd       	sbrc	r21, 7
    1150:	90 58       	subi	r25, 0x80	; 128
    1152:	44 0f       	add	r20, r20
    1154:	55 1f       	adc	r21, r21
    1156:	59 f0       	breq	.+22     	; 0x116e <__fp_splitA+0x10>
    1158:	5f 3f       	cpi	r21, 0xFF	; 255
    115a:	71 f0       	breq	.+28     	; 0x1178 <__fp_splitA+0x1a>
    115c:	47 95       	ror	r20

0000115e <__fp_splitA>:
    115e:	88 0f       	add	r24, r24
    1160:	97 fb       	bst	r25, 7
    1162:	99 1f       	adc	r25, r25
    1164:	61 f0       	breq	.+24     	; 0x117e <__fp_splitA+0x20>
    1166:	9f 3f       	cpi	r25, 0xFF	; 255
    1168:	79 f0       	breq	.+30     	; 0x1188 <__fp_splitA+0x2a>
    116a:	87 95       	ror	r24
    116c:	08 95       	ret
    116e:	12 16       	cp	r1, r18
    1170:	13 06       	cpc	r1, r19
    1172:	14 06       	cpc	r1, r20
    1174:	55 1f       	adc	r21, r21
    1176:	f2 cf       	rjmp	.-28     	; 0x115c <__fp_split3+0xe>
    1178:	46 95       	lsr	r20
    117a:	f1 df       	rcall	.-30     	; 0x115e <__fp_splitA>
    117c:	08 c0       	rjmp	.+16     	; 0x118e <__fp_splitA+0x30>
    117e:	16 16       	cp	r1, r22
    1180:	17 06       	cpc	r1, r23
    1182:	18 06       	cpc	r1, r24
    1184:	99 1f       	adc	r25, r25
    1186:	f1 cf       	rjmp	.-30     	; 0x116a <__fp_splitA+0xc>
    1188:	86 95       	lsr	r24
    118a:	71 05       	cpc	r23, r1
    118c:	61 05       	cpc	r22, r1
    118e:	08 94       	sec
    1190:	08 95       	ret

00001192 <__fp_zero>:
    1192:	e8 94       	clt

00001194 <__fp_szero>:
    1194:	bb 27       	eor	r27, r27
    1196:	66 27       	eor	r22, r22
    1198:	77 27       	eor	r23, r23
    119a:	cb 01       	movw	r24, r22
    119c:	97 f9       	bld	r25, 7
    119e:	08 95       	ret

000011a0 <strcmp>:
    11a0:	fb 01       	movw	r30, r22
    11a2:	dc 01       	movw	r26, r24
    11a4:	8d 91       	ld	r24, X+
    11a6:	01 90       	ld	r0, Z+
    11a8:	80 19       	sub	r24, r0
    11aa:	01 10       	cpse	r0, r1
    11ac:	d9 f3       	breq	.-10     	; 0x11a4 <strcmp+0x4>
    11ae:	99 0b       	sbc	r25, r25
    11b0:	08 95       	ret

000011b2 <__itoa_ncheck>:
    11b2:	bb 27       	eor	r27, r27
    11b4:	4a 30       	cpi	r20, 0x0A	; 10
    11b6:	31 f4       	brne	.+12     	; 0x11c4 <__itoa_ncheck+0x12>
    11b8:	99 23       	and	r25, r25
    11ba:	22 f4       	brpl	.+8      	; 0x11c4 <__itoa_ncheck+0x12>
    11bc:	bd e2       	ldi	r27, 0x2D	; 45
    11be:	90 95       	com	r25
    11c0:	81 95       	neg	r24
    11c2:	9f 4f       	sbci	r25, 0xFF	; 255
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <__utoa_common>

000011c6 <__utoa_ncheck>:
    11c6:	bb 27       	eor	r27, r27

000011c8 <__utoa_common>:
    11c8:	fb 01       	movw	r30, r22
    11ca:	55 27       	eor	r21, r21
    11cc:	aa 27       	eor	r26, r26
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	aa 1f       	adc	r26, r26
    11d4:	a4 17       	cp	r26, r20
    11d6:	10 f0       	brcs	.+4      	; 0x11dc <__utoa_common+0x14>
    11d8:	a4 1b       	sub	r26, r20
    11da:	83 95       	inc	r24
    11dc:	50 51       	subi	r21, 0x10	; 16
    11de:	b9 f7       	brne	.-18     	; 0x11ce <__utoa_common+0x6>
    11e0:	a0 5d       	subi	r26, 0xD0	; 208
    11e2:	aa 33       	cpi	r26, 0x3A	; 58
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <__utoa_common+0x20>
    11e6:	a9 5d       	subi	r26, 0xD9	; 217
    11e8:	a1 93       	st	Z+, r26
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	79 f7       	brne	.-34     	; 0x11cc <__utoa_common+0x4>
    11ee:	b1 11       	cpse	r27, r1
    11f0:	b1 93       	st	Z+, r27
    11f2:	11 92       	st	Z+, r1
    11f4:	cb 01       	movw	r24, r22
    11f6:	15 c2       	rjmp	.+1066   	; 0x1622 <strrev>

000011f8 <snprintf>:
    11f8:	ae e0       	ldi	r26, 0x0E	; 14
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e1 e0       	ldi	r30, 0x01	; 1
    11fe:	f9 e0       	ldi	r31, 0x09	; 9
    1200:	c8 c2       	rjmp	.+1424   	; 0x1792 <__prologue_saves__+0x1c>
    1202:	0d 89       	ldd	r16, Y+21	; 0x15
    1204:	1e 89       	ldd	r17, Y+22	; 0x16
    1206:	8f 89       	ldd	r24, Y+23	; 0x17
    1208:	98 8d       	ldd	r25, Y+24	; 0x18
    120a:	26 e0       	ldi	r18, 0x06	; 6
    120c:	2c 83       	std	Y+4, r18	; 0x04
    120e:	1a 83       	std	Y+2, r17	; 0x02
    1210:	09 83       	std	Y+1, r16	; 0x01
    1212:	97 ff       	sbrs	r25, 7
    1214:	02 c0       	rjmp	.+4      	; 0x121a <snprintf+0x22>
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e8       	ldi	r25, 0x80	; 128
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	9e 83       	std	Y+6, r25	; 0x06
    121e:	8d 83       	std	Y+5, r24	; 0x05
    1220:	ae 01       	movw	r20, r28
    1222:	45 5e       	subi	r20, 0xE5	; 229
    1224:	5f 4f       	sbci	r21, 0xFF	; 255
    1226:	69 8d       	ldd	r22, Y+25	; 0x19
    1228:	7a 8d       	ldd	r23, Y+26	; 0x1a
    122a:	ce 01       	movw	r24, r28
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	11 d0       	rcall	.+34     	; 0x1252 <vfprintf>
    1230:	4d 81       	ldd	r20, Y+5	; 0x05
    1232:	5e 81       	ldd	r21, Y+6	; 0x06
    1234:	57 fd       	sbrc	r21, 7
    1236:	0a c0       	rjmp	.+20     	; 0x124c <snprintf+0x54>
    1238:	2f 81       	ldd	r18, Y+7	; 0x07
    123a:	38 85       	ldd	r19, Y+8	; 0x08
    123c:	42 17       	cp	r20, r18
    123e:	53 07       	cpc	r21, r19
    1240:	0c f4       	brge	.+2      	; 0x1244 <snprintf+0x4c>
    1242:	9a 01       	movw	r18, r20
    1244:	f8 01       	movw	r30, r16
    1246:	e2 0f       	add	r30, r18
    1248:	f3 1f       	adc	r31, r19
    124a:	10 82       	st	Z, r1
    124c:	2e 96       	adiw	r28, 0x0e	; 14
    124e:	e4 e0       	ldi	r30, 0x04	; 4
    1250:	bc c2       	rjmp	.+1400   	; 0x17ca <__epilogue_restores__+0x1c>

00001252 <vfprintf>:
    1252:	ab e0       	ldi	r26, 0x0B	; 11
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	ee e2       	ldi	r30, 0x2E	; 46
    1258:	f9 e0       	ldi	r31, 0x09	; 9
    125a:	8d c2       	rjmp	.+1306   	; 0x1776 <__prologue_saves__>
    125c:	6c 01       	movw	r12, r24
    125e:	7b 01       	movw	r14, r22
    1260:	8a 01       	movw	r16, r20
    1262:	fc 01       	movw	r30, r24
    1264:	17 82       	std	Z+7, r1	; 0x07
    1266:	16 82       	std	Z+6, r1	; 0x06
    1268:	83 81       	ldd	r24, Z+3	; 0x03
    126a:	81 ff       	sbrs	r24, 1
    126c:	bf c1       	rjmp	.+894    	; 0x15ec <vfprintf+0x39a>
    126e:	ce 01       	movw	r24, r28
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	3c 01       	movw	r6, r24
    1274:	f6 01       	movw	r30, r12
    1276:	93 81       	ldd	r25, Z+3	; 0x03
    1278:	f7 01       	movw	r30, r14
    127a:	93 fd       	sbrc	r25, 3
    127c:	85 91       	lpm	r24, Z+
    127e:	93 ff       	sbrs	r25, 3
    1280:	81 91       	ld	r24, Z+
    1282:	7f 01       	movw	r14, r30
    1284:	88 23       	and	r24, r24
    1286:	09 f4       	brne	.+2      	; 0x128a <vfprintf+0x38>
    1288:	ad c1       	rjmp	.+858    	; 0x15e4 <vfprintf+0x392>
    128a:	85 32       	cpi	r24, 0x25	; 37
    128c:	39 f4       	brne	.+14     	; 0x129c <vfprintf+0x4a>
    128e:	93 fd       	sbrc	r25, 3
    1290:	85 91       	lpm	r24, Z+
    1292:	93 ff       	sbrs	r25, 3
    1294:	81 91       	ld	r24, Z+
    1296:	7f 01       	movw	r14, r30
    1298:	85 32       	cpi	r24, 0x25	; 37
    129a:	21 f4       	brne	.+8      	; 0x12a4 <vfprintf+0x52>
    129c:	b6 01       	movw	r22, r12
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	d0 d1       	rcall	.+928    	; 0x1642 <fputc>
    12a2:	e8 cf       	rjmp	.-48     	; 0x1274 <vfprintf+0x22>
    12a4:	91 2c       	mov	r9, r1
    12a6:	21 2c       	mov	r2, r1
    12a8:	31 2c       	mov	r3, r1
    12aa:	ff e1       	ldi	r31, 0x1F	; 31
    12ac:	f3 15       	cp	r31, r3
    12ae:	d8 f0       	brcs	.+54     	; 0x12e6 <vfprintf+0x94>
    12b0:	8b 32       	cpi	r24, 0x2B	; 43
    12b2:	79 f0       	breq	.+30     	; 0x12d2 <vfprintf+0x80>
    12b4:	38 f4       	brcc	.+14     	; 0x12c4 <vfprintf+0x72>
    12b6:	80 32       	cpi	r24, 0x20	; 32
    12b8:	79 f0       	breq	.+30     	; 0x12d8 <vfprintf+0x86>
    12ba:	83 32       	cpi	r24, 0x23	; 35
    12bc:	a1 f4       	brne	.+40     	; 0x12e6 <vfprintf+0x94>
    12be:	23 2d       	mov	r18, r3
    12c0:	20 61       	ori	r18, 0x10	; 16
    12c2:	1d c0       	rjmp	.+58     	; 0x12fe <vfprintf+0xac>
    12c4:	8d 32       	cpi	r24, 0x2D	; 45
    12c6:	61 f0       	breq	.+24     	; 0x12e0 <vfprintf+0x8e>
    12c8:	80 33       	cpi	r24, 0x30	; 48
    12ca:	69 f4       	brne	.+26     	; 0x12e6 <vfprintf+0x94>
    12cc:	23 2d       	mov	r18, r3
    12ce:	21 60       	ori	r18, 0x01	; 1
    12d0:	16 c0       	rjmp	.+44     	; 0x12fe <vfprintf+0xac>
    12d2:	83 2d       	mov	r24, r3
    12d4:	82 60       	ori	r24, 0x02	; 2
    12d6:	38 2e       	mov	r3, r24
    12d8:	e3 2d       	mov	r30, r3
    12da:	e4 60       	ori	r30, 0x04	; 4
    12dc:	3e 2e       	mov	r3, r30
    12de:	2a c0       	rjmp	.+84     	; 0x1334 <vfprintf+0xe2>
    12e0:	f3 2d       	mov	r31, r3
    12e2:	f8 60       	ori	r31, 0x08	; 8
    12e4:	1d c0       	rjmp	.+58     	; 0x1320 <vfprintf+0xce>
    12e6:	37 fc       	sbrc	r3, 7
    12e8:	2d c0       	rjmp	.+90     	; 0x1344 <vfprintf+0xf2>
    12ea:	20 ed       	ldi	r18, 0xD0	; 208
    12ec:	28 0f       	add	r18, r24
    12ee:	2a 30       	cpi	r18, 0x0A	; 10
    12f0:	40 f0       	brcs	.+16     	; 0x1302 <vfprintf+0xb0>
    12f2:	8e 32       	cpi	r24, 0x2E	; 46
    12f4:	b9 f4       	brne	.+46     	; 0x1324 <vfprintf+0xd2>
    12f6:	36 fc       	sbrc	r3, 6
    12f8:	75 c1       	rjmp	.+746    	; 0x15e4 <vfprintf+0x392>
    12fa:	23 2d       	mov	r18, r3
    12fc:	20 64       	ori	r18, 0x40	; 64
    12fe:	32 2e       	mov	r3, r18
    1300:	19 c0       	rjmp	.+50     	; 0x1334 <vfprintf+0xe2>
    1302:	36 fe       	sbrs	r3, 6
    1304:	06 c0       	rjmp	.+12     	; 0x1312 <vfprintf+0xc0>
    1306:	8a e0       	ldi	r24, 0x0A	; 10
    1308:	98 9e       	mul	r9, r24
    130a:	20 0d       	add	r18, r0
    130c:	11 24       	eor	r1, r1
    130e:	92 2e       	mov	r9, r18
    1310:	11 c0       	rjmp	.+34     	; 0x1334 <vfprintf+0xe2>
    1312:	ea e0       	ldi	r30, 0x0A	; 10
    1314:	2e 9e       	mul	r2, r30
    1316:	20 0d       	add	r18, r0
    1318:	11 24       	eor	r1, r1
    131a:	22 2e       	mov	r2, r18
    131c:	f3 2d       	mov	r31, r3
    131e:	f0 62       	ori	r31, 0x20	; 32
    1320:	3f 2e       	mov	r3, r31
    1322:	08 c0       	rjmp	.+16     	; 0x1334 <vfprintf+0xe2>
    1324:	8c 36       	cpi	r24, 0x6C	; 108
    1326:	21 f4       	brne	.+8      	; 0x1330 <vfprintf+0xde>
    1328:	83 2d       	mov	r24, r3
    132a:	80 68       	ori	r24, 0x80	; 128
    132c:	38 2e       	mov	r3, r24
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <vfprintf+0xe2>
    1330:	88 36       	cpi	r24, 0x68	; 104
    1332:	41 f4       	brne	.+16     	; 0x1344 <vfprintf+0xf2>
    1334:	f7 01       	movw	r30, r14
    1336:	93 fd       	sbrc	r25, 3
    1338:	85 91       	lpm	r24, Z+
    133a:	93 ff       	sbrs	r25, 3
    133c:	81 91       	ld	r24, Z+
    133e:	7f 01       	movw	r14, r30
    1340:	81 11       	cpse	r24, r1
    1342:	b3 cf       	rjmp	.-154    	; 0x12aa <vfprintf+0x58>
    1344:	98 2f       	mov	r25, r24
    1346:	9f 7d       	andi	r25, 0xDF	; 223
    1348:	95 54       	subi	r25, 0x45	; 69
    134a:	93 30       	cpi	r25, 0x03	; 3
    134c:	28 f4       	brcc	.+10     	; 0x1358 <vfprintf+0x106>
    134e:	0c 5f       	subi	r16, 0xFC	; 252
    1350:	1f 4f       	sbci	r17, 0xFF	; 255
    1352:	9f e3       	ldi	r25, 0x3F	; 63
    1354:	99 83       	std	Y+1, r25	; 0x01
    1356:	0d c0       	rjmp	.+26     	; 0x1372 <vfprintf+0x120>
    1358:	83 36       	cpi	r24, 0x63	; 99
    135a:	31 f0       	breq	.+12     	; 0x1368 <vfprintf+0x116>
    135c:	83 37       	cpi	r24, 0x73	; 115
    135e:	71 f0       	breq	.+28     	; 0x137c <vfprintf+0x12a>
    1360:	83 35       	cpi	r24, 0x53	; 83
    1362:	09 f0       	breq	.+2      	; 0x1366 <vfprintf+0x114>
    1364:	55 c0       	rjmp	.+170    	; 0x1410 <vfprintf+0x1be>
    1366:	20 c0       	rjmp	.+64     	; 0x13a8 <vfprintf+0x156>
    1368:	f8 01       	movw	r30, r16
    136a:	80 81       	ld	r24, Z
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	0e 5f       	subi	r16, 0xFE	; 254
    1370:	1f 4f       	sbci	r17, 0xFF	; 255
    1372:	88 24       	eor	r8, r8
    1374:	83 94       	inc	r8
    1376:	91 2c       	mov	r9, r1
    1378:	53 01       	movw	r10, r6
    137a:	12 c0       	rjmp	.+36     	; 0x13a0 <vfprintf+0x14e>
    137c:	28 01       	movw	r4, r16
    137e:	f2 e0       	ldi	r31, 0x02	; 2
    1380:	4f 0e       	add	r4, r31
    1382:	51 1c       	adc	r5, r1
    1384:	f8 01       	movw	r30, r16
    1386:	a0 80       	ld	r10, Z
    1388:	b1 80       	ldd	r11, Z+1	; 0x01
    138a:	36 fe       	sbrs	r3, 6
    138c:	03 c0       	rjmp	.+6      	; 0x1394 <vfprintf+0x142>
    138e:	69 2d       	mov	r22, r9
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <vfprintf+0x146>
    1394:	6f ef       	ldi	r22, 0xFF	; 255
    1396:	7f ef       	ldi	r23, 0xFF	; 255
    1398:	c5 01       	movw	r24, r10
    139a:	38 d1       	rcall	.+624    	; 0x160c <strnlen>
    139c:	4c 01       	movw	r8, r24
    139e:	82 01       	movw	r16, r4
    13a0:	f3 2d       	mov	r31, r3
    13a2:	ff 77       	andi	r31, 0x7F	; 127
    13a4:	3f 2e       	mov	r3, r31
    13a6:	15 c0       	rjmp	.+42     	; 0x13d2 <vfprintf+0x180>
    13a8:	28 01       	movw	r4, r16
    13aa:	22 e0       	ldi	r18, 0x02	; 2
    13ac:	42 0e       	add	r4, r18
    13ae:	51 1c       	adc	r5, r1
    13b0:	f8 01       	movw	r30, r16
    13b2:	a0 80       	ld	r10, Z
    13b4:	b1 80       	ldd	r11, Z+1	; 0x01
    13b6:	36 fe       	sbrs	r3, 6
    13b8:	03 c0       	rjmp	.+6      	; 0x13c0 <vfprintf+0x16e>
    13ba:	69 2d       	mov	r22, r9
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <vfprintf+0x172>
    13c0:	6f ef       	ldi	r22, 0xFF	; 255
    13c2:	7f ef       	ldi	r23, 0xFF	; 255
    13c4:	c5 01       	movw	r24, r10
    13c6:	17 d1       	rcall	.+558    	; 0x15f6 <strnlen_P>
    13c8:	4c 01       	movw	r8, r24
    13ca:	f3 2d       	mov	r31, r3
    13cc:	f0 68       	ori	r31, 0x80	; 128
    13ce:	3f 2e       	mov	r3, r31
    13d0:	82 01       	movw	r16, r4
    13d2:	33 fc       	sbrc	r3, 3
    13d4:	19 c0       	rjmp	.+50     	; 0x1408 <vfprintf+0x1b6>
    13d6:	82 2d       	mov	r24, r2
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	88 16       	cp	r8, r24
    13dc:	99 06       	cpc	r9, r25
    13de:	a0 f4       	brcc	.+40     	; 0x1408 <vfprintf+0x1b6>
    13e0:	b6 01       	movw	r22, r12
    13e2:	80 e2       	ldi	r24, 0x20	; 32
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	2d d1       	rcall	.+602    	; 0x1642 <fputc>
    13e8:	2a 94       	dec	r2
    13ea:	f5 cf       	rjmp	.-22     	; 0x13d6 <vfprintf+0x184>
    13ec:	f5 01       	movw	r30, r10
    13ee:	37 fc       	sbrc	r3, 7
    13f0:	85 91       	lpm	r24, Z+
    13f2:	37 fe       	sbrs	r3, 7
    13f4:	81 91       	ld	r24, Z+
    13f6:	5f 01       	movw	r10, r30
    13f8:	b6 01       	movw	r22, r12
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	22 d1       	rcall	.+580    	; 0x1642 <fputc>
    13fe:	21 10       	cpse	r2, r1
    1400:	2a 94       	dec	r2
    1402:	21 e0       	ldi	r18, 0x01	; 1
    1404:	82 1a       	sub	r8, r18
    1406:	91 08       	sbc	r9, r1
    1408:	81 14       	cp	r8, r1
    140a:	91 04       	cpc	r9, r1
    140c:	79 f7       	brne	.-34     	; 0x13ec <vfprintf+0x19a>
    140e:	e1 c0       	rjmp	.+450    	; 0x15d2 <vfprintf+0x380>
    1410:	84 36       	cpi	r24, 0x64	; 100
    1412:	11 f0       	breq	.+4      	; 0x1418 <vfprintf+0x1c6>
    1414:	89 36       	cpi	r24, 0x69	; 105
    1416:	39 f5       	brne	.+78     	; 0x1466 <vfprintf+0x214>
    1418:	f8 01       	movw	r30, r16
    141a:	37 fe       	sbrs	r3, 7
    141c:	07 c0       	rjmp	.+14     	; 0x142c <vfprintf+0x1da>
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	82 81       	ldd	r24, Z+2	; 0x02
    1424:	93 81       	ldd	r25, Z+3	; 0x03
    1426:	0c 5f       	subi	r16, 0xFC	; 252
    1428:	1f 4f       	sbci	r17, 0xFF	; 255
    142a:	08 c0       	rjmp	.+16     	; 0x143c <vfprintf+0x1ea>
    142c:	60 81       	ld	r22, Z
    142e:	71 81       	ldd	r23, Z+1	; 0x01
    1430:	07 2e       	mov	r0, r23
    1432:	00 0c       	add	r0, r0
    1434:	88 0b       	sbc	r24, r24
    1436:	99 0b       	sbc	r25, r25
    1438:	0e 5f       	subi	r16, 0xFE	; 254
    143a:	1f 4f       	sbci	r17, 0xFF	; 255
    143c:	f3 2d       	mov	r31, r3
    143e:	ff 76       	andi	r31, 0x6F	; 111
    1440:	3f 2e       	mov	r3, r31
    1442:	97 ff       	sbrs	r25, 7
    1444:	09 c0       	rjmp	.+18     	; 0x1458 <vfprintf+0x206>
    1446:	90 95       	com	r25
    1448:	80 95       	com	r24
    144a:	70 95       	com	r23
    144c:	61 95       	neg	r22
    144e:	7f 4f       	sbci	r23, 0xFF	; 255
    1450:	8f 4f       	sbci	r24, 0xFF	; 255
    1452:	9f 4f       	sbci	r25, 0xFF	; 255
    1454:	f0 68       	ori	r31, 0x80	; 128
    1456:	3f 2e       	mov	r3, r31
    1458:	2a e0       	ldi	r18, 0x0A	; 10
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	a3 01       	movw	r20, r6
    145e:	2d d1       	rcall	.+602    	; 0x16ba <__ultoa_invert>
    1460:	88 2e       	mov	r8, r24
    1462:	86 18       	sub	r8, r6
    1464:	44 c0       	rjmp	.+136    	; 0x14ee <vfprintf+0x29c>
    1466:	85 37       	cpi	r24, 0x75	; 117
    1468:	31 f4       	brne	.+12     	; 0x1476 <vfprintf+0x224>
    146a:	23 2d       	mov	r18, r3
    146c:	2f 7e       	andi	r18, 0xEF	; 239
    146e:	b2 2e       	mov	r11, r18
    1470:	2a e0       	ldi	r18, 0x0A	; 10
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	25 c0       	rjmp	.+74     	; 0x14c0 <vfprintf+0x26e>
    1476:	93 2d       	mov	r25, r3
    1478:	99 7f       	andi	r25, 0xF9	; 249
    147a:	b9 2e       	mov	r11, r25
    147c:	8f 36       	cpi	r24, 0x6F	; 111
    147e:	c1 f0       	breq	.+48     	; 0x14b0 <vfprintf+0x25e>
    1480:	18 f4       	brcc	.+6      	; 0x1488 <vfprintf+0x236>
    1482:	88 35       	cpi	r24, 0x58	; 88
    1484:	79 f0       	breq	.+30     	; 0x14a4 <vfprintf+0x252>
    1486:	ae c0       	rjmp	.+348    	; 0x15e4 <vfprintf+0x392>
    1488:	80 37       	cpi	r24, 0x70	; 112
    148a:	19 f0       	breq	.+6      	; 0x1492 <vfprintf+0x240>
    148c:	88 37       	cpi	r24, 0x78	; 120
    148e:	21 f0       	breq	.+8      	; 0x1498 <vfprintf+0x246>
    1490:	a9 c0       	rjmp	.+338    	; 0x15e4 <vfprintf+0x392>
    1492:	e9 2f       	mov	r30, r25
    1494:	e0 61       	ori	r30, 0x10	; 16
    1496:	be 2e       	mov	r11, r30
    1498:	b4 fe       	sbrs	r11, 4
    149a:	0d c0       	rjmp	.+26     	; 0x14b6 <vfprintf+0x264>
    149c:	fb 2d       	mov	r31, r11
    149e:	f4 60       	ori	r31, 0x04	; 4
    14a0:	bf 2e       	mov	r11, r31
    14a2:	09 c0       	rjmp	.+18     	; 0x14b6 <vfprintf+0x264>
    14a4:	34 fe       	sbrs	r3, 4
    14a6:	0a c0       	rjmp	.+20     	; 0x14bc <vfprintf+0x26a>
    14a8:	29 2f       	mov	r18, r25
    14aa:	26 60       	ori	r18, 0x06	; 6
    14ac:	b2 2e       	mov	r11, r18
    14ae:	06 c0       	rjmp	.+12     	; 0x14bc <vfprintf+0x26a>
    14b0:	28 e0       	ldi	r18, 0x08	; 8
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	05 c0       	rjmp	.+10     	; 0x14c0 <vfprintf+0x26e>
    14b6:	20 e1       	ldi	r18, 0x10	; 16
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <vfprintf+0x26e>
    14bc:	20 e1       	ldi	r18, 0x10	; 16
    14be:	32 e0       	ldi	r19, 0x02	; 2
    14c0:	f8 01       	movw	r30, r16
    14c2:	b7 fe       	sbrs	r11, 7
    14c4:	07 c0       	rjmp	.+14     	; 0x14d4 <vfprintf+0x282>
    14c6:	60 81       	ld	r22, Z
    14c8:	71 81       	ldd	r23, Z+1	; 0x01
    14ca:	82 81       	ldd	r24, Z+2	; 0x02
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	0c 5f       	subi	r16, 0xFC	; 252
    14d0:	1f 4f       	sbci	r17, 0xFF	; 255
    14d2:	06 c0       	rjmp	.+12     	; 0x14e0 <vfprintf+0x28e>
    14d4:	60 81       	ld	r22, Z
    14d6:	71 81       	ldd	r23, Z+1	; 0x01
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	0e 5f       	subi	r16, 0xFE	; 254
    14de:	1f 4f       	sbci	r17, 0xFF	; 255
    14e0:	a3 01       	movw	r20, r6
    14e2:	eb d0       	rcall	.+470    	; 0x16ba <__ultoa_invert>
    14e4:	88 2e       	mov	r8, r24
    14e6:	86 18       	sub	r8, r6
    14e8:	fb 2d       	mov	r31, r11
    14ea:	ff 77       	andi	r31, 0x7F	; 127
    14ec:	3f 2e       	mov	r3, r31
    14ee:	36 fe       	sbrs	r3, 6
    14f0:	0d c0       	rjmp	.+26     	; 0x150c <vfprintf+0x2ba>
    14f2:	23 2d       	mov	r18, r3
    14f4:	2e 7f       	andi	r18, 0xFE	; 254
    14f6:	a2 2e       	mov	r10, r18
    14f8:	89 14       	cp	r8, r9
    14fa:	58 f4       	brcc	.+22     	; 0x1512 <vfprintf+0x2c0>
    14fc:	34 fe       	sbrs	r3, 4
    14fe:	0b c0       	rjmp	.+22     	; 0x1516 <vfprintf+0x2c4>
    1500:	32 fc       	sbrc	r3, 2
    1502:	09 c0       	rjmp	.+18     	; 0x1516 <vfprintf+0x2c4>
    1504:	83 2d       	mov	r24, r3
    1506:	8e 7e       	andi	r24, 0xEE	; 238
    1508:	a8 2e       	mov	r10, r24
    150a:	05 c0       	rjmp	.+10     	; 0x1516 <vfprintf+0x2c4>
    150c:	b8 2c       	mov	r11, r8
    150e:	a3 2c       	mov	r10, r3
    1510:	03 c0       	rjmp	.+6      	; 0x1518 <vfprintf+0x2c6>
    1512:	b8 2c       	mov	r11, r8
    1514:	01 c0       	rjmp	.+2      	; 0x1518 <vfprintf+0x2c6>
    1516:	b9 2c       	mov	r11, r9
    1518:	a4 fe       	sbrs	r10, 4
    151a:	0f c0       	rjmp	.+30     	; 0x153a <vfprintf+0x2e8>
    151c:	fe 01       	movw	r30, r28
    151e:	e8 0d       	add	r30, r8
    1520:	f1 1d       	adc	r31, r1
    1522:	80 81       	ld	r24, Z
    1524:	80 33       	cpi	r24, 0x30	; 48
    1526:	21 f4       	brne	.+8      	; 0x1530 <vfprintf+0x2de>
    1528:	9a 2d       	mov	r25, r10
    152a:	99 7e       	andi	r25, 0xE9	; 233
    152c:	a9 2e       	mov	r10, r25
    152e:	09 c0       	rjmp	.+18     	; 0x1542 <vfprintf+0x2f0>
    1530:	a2 fe       	sbrs	r10, 2
    1532:	06 c0       	rjmp	.+12     	; 0x1540 <vfprintf+0x2ee>
    1534:	b3 94       	inc	r11
    1536:	b3 94       	inc	r11
    1538:	04 c0       	rjmp	.+8      	; 0x1542 <vfprintf+0x2f0>
    153a:	8a 2d       	mov	r24, r10
    153c:	86 78       	andi	r24, 0x86	; 134
    153e:	09 f0       	breq	.+2      	; 0x1542 <vfprintf+0x2f0>
    1540:	b3 94       	inc	r11
    1542:	a3 fc       	sbrc	r10, 3
    1544:	10 c0       	rjmp	.+32     	; 0x1566 <vfprintf+0x314>
    1546:	a0 fe       	sbrs	r10, 0
    1548:	06 c0       	rjmp	.+12     	; 0x1556 <vfprintf+0x304>
    154a:	b2 14       	cp	r11, r2
    154c:	80 f4       	brcc	.+32     	; 0x156e <vfprintf+0x31c>
    154e:	28 0c       	add	r2, r8
    1550:	92 2c       	mov	r9, r2
    1552:	9b 18       	sub	r9, r11
    1554:	0d c0       	rjmp	.+26     	; 0x1570 <vfprintf+0x31e>
    1556:	b2 14       	cp	r11, r2
    1558:	58 f4       	brcc	.+22     	; 0x1570 <vfprintf+0x31e>
    155a:	b6 01       	movw	r22, r12
    155c:	80 e2       	ldi	r24, 0x20	; 32
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	70 d0       	rcall	.+224    	; 0x1642 <fputc>
    1562:	b3 94       	inc	r11
    1564:	f8 cf       	rjmp	.-16     	; 0x1556 <vfprintf+0x304>
    1566:	b2 14       	cp	r11, r2
    1568:	18 f4       	brcc	.+6      	; 0x1570 <vfprintf+0x31e>
    156a:	2b 18       	sub	r2, r11
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <vfprintf+0x320>
    156e:	98 2c       	mov	r9, r8
    1570:	21 2c       	mov	r2, r1
    1572:	a4 fe       	sbrs	r10, 4
    1574:	0f c0       	rjmp	.+30     	; 0x1594 <vfprintf+0x342>
    1576:	b6 01       	movw	r22, r12
    1578:	80 e3       	ldi	r24, 0x30	; 48
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	62 d0       	rcall	.+196    	; 0x1642 <fputc>
    157e:	a2 fe       	sbrs	r10, 2
    1580:	16 c0       	rjmp	.+44     	; 0x15ae <vfprintf+0x35c>
    1582:	a1 fc       	sbrc	r10, 1
    1584:	03 c0       	rjmp	.+6      	; 0x158c <vfprintf+0x33a>
    1586:	88 e7       	ldi	r24, 0x78	; 120
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <vfprintf+0x33e>
    158c:	88 e5       	ldi	r24, 0x58	; 88
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	b6 01       	movw	r22, r12
    1592:	0c c0       	rjmp	.+24     	; 0x15ac <vfprintf+0x35a>
    1594:	8a 2d       	mov	r24, r10
    1596:	86 78       	andi	r24, 0x86	; 134
    1598:	51 f0       	breq	.+20     	; 0x15ae <vfprintf+0x35c>
    159a:	a1 fe       	sbrs	r10, 1
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <vfprintf+0x350>
    159e:	8b e2       	ldi	r24, 0x2B	; 43
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <vfprintf+0x352>
    15a2:	80 e2       	ldi	r24, 0x20	; 32
    15a4:	a7 fc       	sbrc	r10, 7
    15a6:	8d e2       	ldi	r24, 0x2D	; 45
    15a8:	b6 01       	movw	r22, r12
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	4a d0       	rcall	.+148    	; 0x1642 <fputc>
    15ae:	89 14       	cp	r8, r9
    15b0:	30 f4       	brcc	.+12     	; 0x15be <vfprintf+0x36c>
    15b2:	b6 01       	movw	r22, r12
    15b4:	80 e3       	ldi	r24, 0x30	; 48
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	44 d0       	rcall	.+136    	; 0x1642 <fputc>
    15ba:	9a 94       	dec	r9
    15bc:	f8 cf       	rjmp	.-16     	; 0x15ae <vfprintf+0x35c>
    15be:	8a 94       	dec	r8
    15c0:	f3 01       	movw	r30, r6
    15c2:	e8 0d       	add	r30, r8
    15c4:	f1 1d       	adc	r31, r1
    15c6:	80 81       	ld	r24, Z
    15c8:	b6 01       	movw	r22, r12
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	3a d0       	rcall	.+116    	; 0x1642 <fputc>
    15ce:	81 10       	cpse	r8, r1
    15d0:	f6 cf       	rjmp	.-20     	; 0x15be <vfprintf+0x36c>
    15d2:	22 20       	and	r2, r2
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <vfprintf+0x386>
    15d6:	4e ce       	rjmp	.-868    	; 0x1274 <vfprintf+0x22>
    15d8:	b6 01       	movw	r22, r12
    15da:	80 e2       	ldi	r24, 0x20	; 32
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	31 d0       	rcall	.+98     	; 0x1642 <fputc>
    15e0:	2a 94       	dec	r2
    15e2:	f7 cf       	rjmp	.-18     	; 0x15d2 <vfprintf+0x380>
    15e4:	f6 01       	movw	r30, r12
    15e6:	86 81       	ldd	r24, Z+6	; 0x06
    15e8:	97 81       	ldd	r25, Z+7	; 0x07
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <vfprintf+0x39e>
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	9f ef       	ldi	r25, 0xFF	; 255
    15f0:	2b 96       	adiw	r28, 0x0b	; 11
    15f2:	e2 e1       	ldi	r30, 0x12	; 18
    15f4:	dc c0       	rjmp	.+440    	; 0x17ae <__epilogue_restores__>

000015f6 <strnlen_P>:
    15f6:	fc 01       	movw	r30, r24
    15f8:	05 90       	lpm	r0, Z+
    15fa:	61 50       	subi	r22, 0x01	; 1
    15fc:	70 40       	sbci	r23, 0x00	; 0
    15fe:	01 10       	cpse	r0, r1
    1600:	d8 f7       	brcc	.-10     	; 0x15f8 <strnlen_P+0x2>
    1602:	80 95       	com	r24
    1604:	90 95       	com	r25
    1606:	8e 0f       	add	r24, r30
    1608:	9f 1f       	adc	r25, r31
    160a:	08 95       	ret

0000160c <strnlen>:
    160c:	fc 01       	movw	r30, r24
    160e:	61 50       	subi	r22, 0x01	; 1
    1610:	70 40       	sbci	r23, 0x00	; 0
    1612:	01 90       	ld	r0, Z+
    1614:	01 10       	cpse	r0, r1
    1616:	d8 f7       	brcc	.-10     	; 0x160e <strnlen+0x2>
    1618:	80 95       	com	r24
    161a:	90 95       	com	r25
    161c:	8e 0f       	add	r24, r30
    161e:	9f 1f       	adc	r25, r31
    1620:	08 95       	ret

00001622 <strrev>:
    1622:	dc 01       	movw	r26, r24
    1624:	fc 01       	movw	r30, r24
    1626:	67 2f       	mov	r22, r23
    1628:	71 91       	ld	r23, Z+
    162a:	77 23       	and	r23, r23
    162c:	e1 f7       	brne	.-8      	; 0x1626 <strrev+0x4>
    162e:	32 97       	sbiw	r30, 0x02	; 2
    1630:	04 c0       	rjmp	.+8      	; 0x163a <strrev+0x18>
    1632:	7c 91       	ld	r23, X
    1634:	6d 93       	st	X+, r22
    1636:	70 83       	st	Z, r23
    1638:	62 91       	ld	r22, -Z
    163a:	ae 17       	cp	r26, r30
    163c:	bf 07       	cpc	r27, r31
    163e:	c8 f3       	brcs	.-14     	; 0x1632 <strrev+0x10>
    1640:	08 95       	ret

00001642 <fputc>:
    1642:	0f 93       	push	r16
    1644:	1f 93       	push	r17
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	fb 01       	movw	r30, r22
    164c:	23 81       	ldd	r18, Z+3	; 0x03
    164e:	21 fd       	sbrc	r18, 1
    1650:	03 c0       	rjmp	.+6      	; 0x1658 <fputc+0x16>
    1652:	8f ef       	ldi	r24, 0xFF	; 255
    1654:	9f ef       	ldi	r25, 0xFF	; 255
    1656:	2c c0       	rjmp	.+88     	; 0x16b0 <fputc+0x6e>
    1658:	22 ff       	sbrs	r18, 2
    165a:	16 c0       	rjmp	.+44     	; 0x1688 <fputc+0x46>
    165c:	46 81       	ldd	r20, Z+6	; 0x06
    165e:	57 81       	ldd	r21, Z+7	; 0x07
    1660:	24 81       	ldd	r18, Z+4	; 0x04
    1662:	35 81       	ldd	r19, Z+5	; 0x05
    1664:	42 17       	cp	r20, r18
    1666:	53 07       	cpc	r21, r19
    1668:	44 f4       	brge	.+16     	; 0x167a <fputc+0x38>
    166a:	a0 81       	ld	r26, Z
    166c:	b1 81       	ldd	r27, Z+1	; 0x01
    166e:	9d 01       	movw	r18, r26
    1670:	2f 5f       	subi	r18, 0xFF	; 255
    1672:	3f 4f       	sbci	r19, 0xFF	; 255
    1674:	31 83       	std	Z+1, r19	; 0x01
    1676:	20 83       	st	Z, r18
    1678:	8c 93       	st	X, r24
    167a:	26 81       	ldd	r18, Z+6	; 0x06
    167c:	37 81       	ldd	r19, Z+7	; 0x07
    167e:	2f 5f       	subi	r18, 0xFF	; 255
    1680:	3f 4f       	sbci	r19, 0xFF	; 255
    1682:	37 83       	std	Z+7, r19	; 0x07
    1684:	26 83       	std	Z+6, r18	; 0x06
    1686:	14 c0       	rjmp	.+40     	; 0x16b0 <fputc+0x6e>
    1688:	8b 01       	movw	r16, r22
    168a:	ec 01       	movw	r28, r24
    168c:	fb 01       	movw	r30, r22
    168e:	00 84       	ldd	r0, Z+8	; 0x08
    1690:	f1 85       	ldd	r31, Z+9	; 0x09
    1692:	e0 2d       	mov	r30, r0
    1694:	09 95       	icall
    1696:	89 2b       	or	r24, r25
    1698:	e1 f6       	brne	.-72     	; 0x1652 <fputc+0x10>
    169a:	d8 01       	movw	r26, r16
    169c:	16 96       	adiw	r26, 0x06	; 6
    169e:	8d 91       	ld	r24, X+
    16a0:	9c 91       	ld	r25, X
    16a2:	17 97       	sbiw	r26, 0x07	; 7
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	17 96       	adiw	r26, 0x07	; 7
    16a8:	9c 93       	st	X, r25
    16aa:	8e 93       	st	-X, r24
    16ac:	16 97       	sbiw	r26, 0x06	; 6
    16ae:	ce 01       	movw	r24, r28
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	1f 91       	pop	r17
    16b6:	0f 91       	pop	r16
    16b8:	08 95       	ret

000016ba <__ultoa_invert>:
    16ba:	fa 01       	movw	r30, r20
    16bc:	aa 27       	eor	r26, r26
    16be:	28 30       	cpi	r18, 0x08	; 8
    16c0:	51 f1       	breq	.+84     	; 0x1716 <__ultoa_invert+0x5c>
    16c2:	20 31       	cpi	r18, 0x10	; 16
    16c4:	81 f1       	breq	.+96     	; 0x1726 <__ultoa_invert+0x6c>
    16c6:	e8 94       	clt
    16c8:	6f 93       	push	r22
    16ca:	6e 7f       	andi	r22, 0xFE	; 254
    16cc:	6e 5f       	subi	r22, 0xFE	; 254
    16ce:	7f 4f       	sbci	r23, 0xFF	; 255
    16d0:	8f 4f       	sbci	r24, 0xFF	; 255
    16d2:	9f 4f       	sbci	r25, 0xFF	; 255
    16d4:	af 4f       	sbci	r26, 0xFF	; 255
    16d6:	b1 e0       	ldi	r27, 0x01	; 1
    16d8:	3e d0       	rcall	.+124    	; 0x1756 <__ultoa_invert+0x9c>
    16da:	b4 e0       	ldi	r27, 0x04	; 4
    16dc:	3c d0       	rcall	.+120    	; 0x1756 <__ultoa_invert+0x9c>
    16de:	67 0f       	add	r22, r23
    16e0:	78 1f       	adc	r23, r24
    16e2:	89 1f       	adc	r24, r25
    16e4:	9a 1f       	adc	r25, r26
    16e6:	a1 1d       	adc	r26, r1
    16e8:	68 0f       	add	r22, r24
    16ea:	79 1f       	adc	r23, r25
    16ec:	8a 1f       	adc	r24, r26
    16ee:	91 1d       	adc	r25, r1
    16f0:	a1 1d       	adc	r26, r1
    16f2:	6a 0f       	add	r22, r26
    16f4:	71 1d       	adc	r23, r1
    16f6:	81 1d       	adc	r24, r1
    16f8:	91 1d       	adc	r25, r1
    16fa:	a1 1d       	adc	r26, r1
    16fc:	20 d0       	rcall	.+64     	; 0x173e <__ultoa_invert+0x84>
    16fe:	09 f4       	brne	.+2      	; 0x1702 <__ultoa_invert+0x48>
    1700:	68 94       	set
    1702:	3f 91       	pop	r19
    1704:	2a e0       	ldi	r18, 0x0A	; 10
    1706:	26 9f       	mul	r18, r22
    1708:	11 24       	eor	r1, r1
    170a:	30 19       	sub	r19, r0
    170c:	30 5d       	subi	r19, 0xD0	; 208
    170e:	31 93       	st	Z+, r19
    1710:	de f6       	brtc	.-74     	; 0x16c8 <__ultoa_invert+0xe>
    1712:	cf 01       	movw	r24, r30
    1714:	08 95       	ret
    1716:	46 2f       	mov	r20, r22
    1718:	47 70       	andi	r20, 0x07	; 7
    171a:	40 5d       	subi	r20, 0xD0	; 208
    171c:	41 93       	st	Z+, r20
    171e:	b3 e0       	ldi	r27, 0x03	; 3
    1720:	0f d0       	rcall	.+30     	; 0x1740 <__ultoa_invert+0x86>
    1722:	c9 f7       	brne	.-14     	; 0x1716 <__ultoa_invert+0x5c>
    1724:	f6 cf       	rjmp	.-20     	; 0x1712 <__ultoa_invert+0x58>
    1726:	46 2f       	mov	r20, r22
    1728:	4f 70       	andi	r20, 0x0F	; 15
    172a:	40 5d       	subi	r20, 0xD0	; 208
    172c:	4a 33       	cpi	r20, 0x3A	; 58
    172e:	18 f0       	brcs	.+6      	; 0x1736 <__ultoa_invert+0x7c>
    1730:	49 5d       	subi	r20, 0xD9	; 217
    1732:	31 fd       	sbrc	r19, 1
    1734:	40 52       	subi	r20, 0x20	; 32
    1736:	41 93       	st	Z+, r20
    1738:	02 d0       	rcall	.+4      	; 0x173e <__ultoa_invert+0x84>
    173a:	a9 f7       	brne	.-22     	; 0x1726 <__ultoa_invert+0x6c>
    173c:	ea cf       	rjmp	.-44     	; 0x1712 <__ultoa_invert+0x58>
    173e:	b4 e0       	ldi	r27, 0x04	; 4
    1740:	a6 95       	lsr	r26
    1742:	97 95       	ror	r25
    1744:	87 95       	ror	r24
    1746:	77 95       	ror	r23
    1748:	67 95       	ror	r22
    174a:	ba 95       	dec	r27
    174c:	c9 f7       	brne	.-14     	; 0x1740 <__ultoa_invert+0x86>
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	61 05       	cpc	r22, r1
    1752:	71 05       	cpc	r23, r1
    1754:	08 95       	ret
    1756:	9b 01       	movw	r18, r22
    1758:	ac 01       	movw	r20, r24
    175a:	0a 2e       	mov	r0, r26
    175c:	06 94       	lsr	r0
    175e:	57 95       	ror	r21
    1760:	47 95       	ror	r20
    1762:	37 95       	ror	r19
    1764:	27 95       	ror	r18
    1766:	ba 95       	dec	r27
    1768:	c9 f7       	brne	.-14     	; 0x175c <__ultoa_invert+0xa2>
    176a:	62 0f       	add	r22, r18
    176c:	73 1f       	adc	r23, r19
    176e:	84 1f       	adc	r24, r20
    1770:	95 1f       	adc	r25, r21
    1772:	a0 1d       	adc	r26, r0
    1774:	08 95       	ret

00001776 <__prologue_saves__>:
    1776:	2f 92       	push	r2
    1778:	3f 92       	push	r3
    177a:	4f 92       	push	r4
    177c:	5f 92       	push	r5
    177e:	6f 92       	push	r6
    1780:	7f 92       	push	r7
    1782:	8f 92       	push	r8
    1784:	9f 92       	push	r9
    1786:	af 92       	push	r10
    1788:	bf 92       	push	r11
    178a:	cf 92       	push	r12
    178c:	df 92       	push	r13
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	ca 1b       	sub	r28, r26
    17a0:	db 0b       	sbc	r29, r27
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	09 94       	ijmp

000017ae <__epilogue_restores__>:
    17ae:	2a 88       	ldd	r2, Y+18	; 0x12
    17b0:	39 88       	ldd	r3, Y+17	; 0x11
    17b2:	48 88       	ldd	r4, Y+16	; 0x10
    17b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    17b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    17b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    17ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    17bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    17be:	aa 84       	ldd	r10, Y+10	; 0x0a
    17c0:	b9 84       	ldd	r11, Y+9	; 0x09
    17c2:	c8 84       	ldd	r12, Y+8	; 0x08
    17c4:	df 80       	ldd	r13, Y+7	; 0x07
    17c6:	ee 80       	ldd	r14, Y+6	; 0x06
    17c8:	fd 80       	ldd	r15, Y+5	; 0x05
    17ca:	0c 81       	ldd	r16, Y+4	; 0x04
    17cc:	1b 81       	ldd	r17, Y+3	; 0x03
    17ce:	aa 81       	ldd	r26, Y+2	; 0x02
    17d0:	b9 81       	ldd	r27, Y+1	; 0x01
    17d2:	ce 0f       	add	r28, r30
    17d4:	d1 1d       	adc	r29, r1
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	ed 01       	movw	r28, r26
    17e2:	08 95       	ret

000017e4 <_exit>:
    17e4:	f8 94       	cli

000017e6 <__stop_program>:
    17e6:	ff cf       	rjmp	.-2      	; 0x17e6 <__stop_program>
